{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\content\\\\CommentsWriterContainer.js\";\nimport React, { useEffect } from 'react';\nimport CommentsWriter from '../../components/content/CommentsWriter';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport submitComment from '../../modules/content';\n\nconst CommentsWriterContainer = ({\n  history\n}) => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    content,\n    user\n  }) => ({\n    title: content.content.title,\n    body: content.content.body,\n    taggedContest: content.content.taggedContest,\n    videoURL: content.content.videoURL,\n    team: content.content.team,\n    status: content.content.status,\n    stars: content.content.stars,\n    comments: [...content.content.comments, content.commentBody],\n    user: user.user\n  })),\n        title = _useSelector.title,\n        body = _useSelector.body,\n        taggedContest = _useSelector.taggedContest,\n        videoURL = _useSelector.videoURL,\n        team = _useSelector.team,\n        status = _useSelector.status,\n        stars = _useSelector.stars,\n        comments = _useSelector.comments,\n        user = _useSelector.user;\n\n  const onAddComment = () => {\n    if (user) {\n      dispatch(submitComment({\n        title,\n        body,\n        taggedContest,\n        videoURL,\n        team,\n        status,\n        stars,\n        comments\n      }));\n    } else {\n      alert('로그인이 필요한 서비스 입니다.');\n      history.push('/login');\n    }\n  };\n\n  useEffect(() => {\n    return React.createElement(CommentsWriter, {\n      onAddComment: onAddComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    });\n  });\n};\n\nexport default withRouter(CommentsWriterContainer);","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/containers/content/CommentsWriterContainer.js"],"names":["React","useEffect","CommentsWriter","useSelector","useDispatch","withRouter","submitComment","CommentsWriterContainer","history","dispatch","content","user","title","body","taggedContest","videoURL","team","status","stars","comments","commentBody","onAddComment","alert","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,yCAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,uBAA1B;;AAEA,MAAMC,uBAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC/C,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AAD+C,uBAY3CD,WAAW,CAAC,CAAC;AAAEO,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,MAAwB;AACtCC,IAAAA,KAAK,EAAEF,OAAO,CAACA,OAAR,CAAgBE,KADe;AAEtCC,IAAAA,IAAI,EAAEH,OAAO,CAACA,OAAR,CAAgBG,IAFgB;AAGtCC,IAAAA,aAAa,EAAEJ,OAAO,CAACA,OAAR,CAAgBI,aAHO;AAItCC,IAAAA,QAAQ,EAAEL,OAAO,CAACA,OAAR,CAAgBK,QAJY;AAKtCC,IAAAA,IAAI,EAAEN,OAAO,CAACA,OAAR,CAAgBM,IALgB;AAMtCC,IAAAA,MAAM,EAAEP,OAAO,CAACA,OAAR,CAAgBO,MANc;AAOtCC,IAAAA,KAAK,EAAER,OAAO,CAACA,OAAR,CAAgBQ,KAPe;AAQtCC,IAAAA,QAAQ,EAAE,CAAC,GAAGT,OAAO,CAACA,OAAR,CAAgBS,QAApB,EAA8BT,OAAO,CAACU,WAAtC,CAR4B;AAStCT,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAT2B,GAAxB,CAAD,CAZgC;AAAA,QAG7CC,KAH6C,gBAG7CA,KAH6C;AAAA,QAI7CC,IAJ6C,gBAI7CA,IAJ6C;AAAA,QAK7CC,aAL6C,gBAK7CA,aAL6C;AAAA,QAM7CC,QAN6C,gBAM7CA,QAN6C;AAAA,QAO7CC,IAP6C,gBAO7CA,IAP6C;AAAA,QAQ7CC,MAR6C,gBAQ7CA,MAR6C;AAAA,QAS7CC,KAT6C,gBAS7CA,KAT6C;AAAA,QAU7CC,QAV6C,gBAU7CA,QAV6C;AAAA,QAW7CR,IAX6C,gBAW7CA,IAX6C;;AAwB/C,QAAMU,YAAY,GAAG,MAAM;AACzB,QAAIV,IAAJ,EAAU;AACRF,MAAAA,QAAQ,CACNH,aAAa,CAAC;AACZM,QAAAA,KADY;AAEZC,QAAAA,IAFY;AAGZC,QAAAA,aAHY;AAIZC,QAAAA,QAJY;AAKZC,QAAAA,IALY;AAMZC,QAAAA,MANY;AAOZC,QAAAA,KAPY;AAQZC,QAAAA;AARY,OAAD,CADP,CAAR;AAYD,KAbD,MAaO;AACLG,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACAd,MAAAA,OAAO,CAACe,IAAR,CAAa,QAAb;AACD;AACF,GAlBD;;AAoBAtB,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,oBAAC,cAAD;AAAgB,MAAA,YAAY,EAAEoB,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFQ,CAAT;AAGD,CA/CD;;AAiDA,eAAehB,UAAU,CAACE,uBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport CommentsWriter from '../../components/content/CommentsWriter';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport submitComment from '../../modules/content';\r\n\r\nconst CommentsWriterContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    title,\r\n    body,\r\n    taggedContest,\r\n    videoURL,\r\n    team,\r\n    status,\r\n    stars,\r\n    comments,\r\n    user,\r\n  } = useSelector(({ content, user }) => ({\r\n    title: content.content.title,\r\n    body: content.content.body,\r\n    taggedContest: content.content.taggedContest,\r\n    videoURL: content.content.videoURL,\r\n    team: content.content.team,\r\n    status: content.content.status,\r\n    stars: content.content.stars,\r\n    comments: [...content.content.comments, content.commentBody],\r\n    user: user.user,\r\n  }));\r\n\r\n  const onAddComment = () => {\r\n    if (user) {\r\n      dispatch(\r\n        submitComment({\r\n          title,\r\n          body,\r\n          taggedContest,\r\n          videoURL,\r\n          team,\r\n          status,\r\n          stars,\r\n          comments,\r\n        }),\r\n      );\r\n    } else {\r\n      alert('로그인이 필요한 서비스 입니다.');\r\n      history.push('/login');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return <CommentsWriter onAddComment={onAddComment} />;\r\n  });\r\n};\r\n\r\nexport default withRouter(CommentsWriterContainer);\r\n"]},"metadata":{},"sourceType":"module"}