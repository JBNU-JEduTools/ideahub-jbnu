{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\index.js\";\nimport dotenv from 'dotenv';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\ndotenv.config();\nconst REACT_APP_ADMIN = dotenv.REACT_APP_ADMIN,\n      REACT_APP_WRITER = dotenv.REACT_APP_WRITER,\n      REACT_APP_VISITER = dotenv.REACT_APP_VISITER;\nconsole.log(REACT_APP_ADMIN);\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware))); //load user info from local storage when first rendering happens.\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user'); //do nothing if user info is not in local storage.\n\n    if (!user) return; //put user info into redux store if user info is in local storage.\n\n    store.dispatch(tempSetUser(user)); //check if user logged in\n\n    store.dispatch(check());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}))), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\index.js"],"names":["dotenv","React","ReactDOM","App","serviceWorker","BrowserRouter","Provider","createStore","applyMiddleware","composeWithDevTools","createSagaMiddleware","rootReducer","rootSaga","tempSetUser","check","config","REACT_APP_ADMIN","REACT_APP_WRITER","REACT_APP_VISITER","console","log","sagaMiddleware","store","loadUser","user","localStorage","getItem","dispatch","e","run","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,IAAsBC,QAAtB,QAAsC,WAAtC;AACA,SAASC,WAAT,EAAsBC,KAAtB,QAAmC,gBAAnC;AAEAd,MAAM,CAACe,MAAP;MACQC,e,GAAyDhB,M,CAAzDgB,e;MAAiBC,gB,GAAwCjB,M,CAAxCiB,gB;MAAkBC,iB,GAAsBlB,M,CAAtBkB,iB;AAC3CC,OAAO,CAACC,GAAR,CAAYJ,eAAZ;AAEA,MAAMK,cAAc,GAAGX,oBAAoB,EAA3C;AAEA,MAAMY,KAAK,GAAGf,WAAW,CACvBI,WADuB,EAEvBF,mBAAmB,CAACD,eAAe,CAACa,cAAD,CAAhB,CAFI,CAAzB,C,CAKA;;AACA,SAASE,QAAT,GAAoB;AAClB,MAAI;AACF,UAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb,CADE,CAEF;;AACA,QAAI,CAACF,IAAL,EAAW,OAHT,CAKF;;AACAF,IAAAA,KAAK,CAACK,QAAN,CAAed,WAAW,CAACW,IAAD,CAA1B,EANE,CAOF;;AACAF,IAAAA,KAAK,CAACK,QAAN,CAAeb,KAAK,EAApB;AACD,GATD,CASE,OAAOc,CAAP,EAAU;AACVT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAZ;AACD;AACF;;AAEDP,cAAc,CAACQ,GAAf,CAAmBjB,QAAnB;AACAW,QAAQ;AAERrB,QAAQ,CAAC4B,MAAT,CACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAER,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,EAMES,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF;AASA5B,aAAa,CAAC6B,UAAd","sourcesContent":["import dotenv from 'dotenv';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\n\ndotenv.config();\nconst { REACT_APP_ADMIN, REACT_APP_WRITER, REACT_APP_VISITER } = dotenv;\nconsole.log(REACT_APP_ADMIN);\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\n//load user info from local storage when first rendering happens.\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    //do nothing if user info is not in local storage.\n    if (!user) return;\n\n    //put user info into redux store if user info is in local storage.\n    store.dispatch(tempSetUser(user));\n    //check if user logged in\n    store.dispatch(check());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}