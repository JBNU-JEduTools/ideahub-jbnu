{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as contentPostsAPI from '../lib/api/contentPosts';\nimport { takeLatest } from 'redux-saga/effects'; //action type\n\nconst SET_INITIAL_STATE = 'contentwrite/SET_INITIAL_STATE'; //taggedContest를 현재 contestName으로 초기화\n\nconst INITIALIZE = 'contentwrite/INITIALIZE'; //모든 내용 초기화\n\nconst CHANGE_FIELD = 'contentwrite/CHANGE_FIELD'; //특정 key값 바꾸기\n\nconst _createRequestActionT = createRequestActionTypes('contentwrite/CONTENT_WRITE_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      CONTENT_WRITE_POST = _createRequestActionT2[0],\n      CONTENT_WRITE_POST_SUCCESS = _createRequestActionT2[1],\n      CONTENT_WRITE_POST_FAILURE = _createRequestActionT2[2];\n\nconst SET_ORIGINAL_CONTENT = 'contentwrite/SET_ORIGINAL_CONTENT'; //콘텐츠 수정버튼 클릭 시 기존 정보를 상태에 넣기 위함\n\nconst _createRequestActionT3 = createRequestActionTypes('contentwrite/UPDATE_CONTENT'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      UPDATE_CONTENT = _createRequestActionT4[0],\n      UPDATE_CONTENT_SUCCESS = _createRequestActionT4[1],\n      UPDATE_CONTENT_FAILURE = _createRequestActionT4[2]; //포스트 수정\n//action creating functions\n\n\nexport const setInitialState = createAction(SET_INITIAL_STATE);\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const contentWritePost = createAction(CONTENT_WRITE_POST, ({\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n}) => ({\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n}));\nexport const setOriginalContent = createAction(SET_ORIGINAL_CONTENT, content => content);\nexport const updateContent = createAction(UPDATE_CONTENT, ({\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n}) => ({\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n})); //create saga\n\nconst contentWritePostSaga = createRequestSaga(CONTENT_WRITE_POST, contentPostsAPI.contentWritePost);\nconst updateContentSaga = createRequestSaga(UPDATE_CONTENT, contentPostsAPI.updateContent);\nexport function* contentWriteSaga() {\n  yield takeLatest(CONTENT_WRITE_POST, contentWritePostSaga);\n  yield takeLatest(UPDATE_CONTENT, updateContentSaga);\n} //initial state\n\nconst initialState = {\n  title: '',\n  body: '',\n  taggedContest: '',\n  taggedContestID: '',\n  videoURL: '',\n  team: '',\n  status: '',\n  github: '',\n  content: null,\n  contentError: null,\n  originalContentId: null\n}; //reducer\n\nconst contentWrite = handleActions({\n  [SET_INITIAL_STATE]: (state, {\n    payload: contestName\n  }) => _objectSpread({}, initialState, {\n    taggedContest: contestName.contestName,\n    taggedContestID: contestName.contestID\n  }),\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value\n  }),\n  [CONTENT_WRITE_POST]: state => _objectSpread({}, state, {\n    content: null,\n    contentError: null\n  }),\n  [CONTENT_WRITE_POST_SUCCESS]: (state, {\n    payload: content\n  }) => _objectSpread({}, state, {\n    content\n  }),\n  [CONTENT_WRITE_POST_FAILURE]: (state, {\n    payload: contentError\n  }) => _objectSpread({}, state, {\n    contentError\n  }),\n  [SET_ORIGINAL_CONTENT]: (state, {\n    payload: content\n  }) => _objectSpread({}, state, {\n    title: content.title,\n    body: content.body,\n    taggedContest: content.taggedContest,\n    taggedContestID: content.taggedContestID,\n    videoURL: content.videoURL,\n    team: content.team,\n    status: content.status,\n    github: content.github,\n    stars: content.stars,\n    originalContentId: content._id\n  }),\n  [UPDATE_CONTENT_SUCCESS]: (state, {\n    payload: content\n  }) => _objectSpread({}, state, {\n    content\n  }),\n  [UPDATE_CONTENT_FAILURE]: (state, {\n    payload: contentError\n  }) => _objectSpread({}, state, {\n    contentError\n  })\n}, initialState);\nexport default contentWrite;","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\modules\\contentWrite.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","contentPostsAPI","takeLatest","SET_INITIAL_STATE","INITIALIZE","CHANGE_FIELD","CONTENT_WRITE_POST","CONTENT_WRITE_POST_SUCCESS","CONTENT_WRITE_POST_FAILURE","SET_ORIGINAL_CONTENT","UPDATE_CONTENT","UPDATE_CONTENT_SUCCESS","UPDATE_CONTENT_FAILURE","setInitialState","initialize","changeField","key","value","contentWritePost","title","body","taggedContest","taggedContestID","videoURL","team","status","github","setOriginalContent","content","updateContent","contentWritePostSaga","updateContentSaga","contentWriteSaga","initialState","contentError","originalContentId","contentWrite","state","payload","contestName","contestID","stars","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as contentPostsAPI from '../lib/api/contentPosts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n//action type\r\nconst SET_INITIAL_STATE = 'contentwrite/SET_INITIAL_STATE'; //taggedContest를 현재 contestName으로 초기화\r\nconst INITIALIZE = 'contentwrite/INITIALIZE'; //모든 내용 초기화\r\nconst CHANGE_FIELD = 'contentwrite/CHANGE_FIELD'; //특정 key값 바꾸기\r\nconst [\r\n  CONTENT_WRITE_POST,\r\n  CONTENT_WRITE_POST_SUCCESS,\r\n  CONTENT_WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('contentwrite/CONTENT_WRITE_POST');\r\nconst SET_ORIGINAL_CONTENT = 'contentwrite/SET_ORIGINAL_CONTENT'; //콘텐츠 수정버튼 클릭 시 기존 정보를 상태에 넣기 위함\r\nconst [\r\n  UPDATE_CONTENT,\r\n  UPDATE_CONTENT_SUCCESS,\r\n  UPDATE_CONTENT_FAILURE,\r\n] = createRequestActionTypes('contentwrite/UPDATE_CONTENT'); //포스트 수정\r\n\r\n//action creating functions\r\nexport const setInitialState = createAction(SET_INITIAL_STATE);\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const contentWritePost = createAction(\r\n  CONTENT_WRITE_POST,\r\n  ({\r\n    title,\r\n    body,\r\n    taggedContest,\r\n    taggedContestID,\r\n    videoURL,\r\n    team,\r\n    status,\r\n    github,\r\n  }) => ({\r\n    title,\r\n    body,\r\n    taggedContest,\r\n    taggedContestID,\r\n    videoURL,\r\n    team,\r\n    status,\r\n    github,\r\n  }),\r\n);\r\nexport const setOriginalContent = createAction(\r\n  SET_ORIGINAL_CONTENT,\r\n  (content) => content,\r\n);\r\nexport const updateContent = createAction(\r\n  UPDATE_CONTENT,\r\n  ({\r\n    title,\r\n    body,\r\n    taggedContest,\r\n    taggedContestID,\r\n    videoURL,\r\n    team,\r\n    status,\r\n    github,\r\n  }) => ({\r\n    title,\r\n    body,\r\n    taggedContest,\r\n    taggedContestID,\r\n    videoURL,\r\n    team,\r\n    status,\r\n    github,\r\n  }),\r\n);\r\n\r\n//create saga\r\nconst contentWritePostSaga = createRequestSaga(\r\n  CONTENT_WRITE_POST,\r\n  contentPostsAPI.contentWritePost,\r\n);\r\nconst updateContentSaga = createRequestSaga(\r\n  UPDATE_CONTENT,\r\n  contentPostsAPI.updateContent,\r\n);\r\nexport function* contentWriteSaga() {\r\n  yield takeLatest(CONTENT_WRITE_POST, contentWritePostSaga);\r\n  yield takeLatest(UPDATE_CONTENT, updateContentSaga);\r\n}\r\n\r\n//initial state\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  taggedContest: '',\r\n  taggedContestID: '',\r\n  videoURL: '',\r\n  team: '',\r\n  status: '',\r\n  github: '',\r\n  content: null,\r\n  contentError: null,\r\n  originalContentId: null,\r\n};\r\n\r\n//reducer\r\nconst contentWrite = handleActions(\r\n  {\r\n    [SET_INITIAL_STATE]: (state, { payload: contestName }) => ({\r\n      ...initialState,\r\n      taggedContest: contestName.contestName,\r\n      taggedContestID: contestName.contestID,\r\n    }),\r\n    [INITIALIZE]: (state) => initialState,\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value,\r\n    }),\r\n    [CONTENT_WRITE_POST]: (state) => ({\r\n      ...state,\r\n      content: null,\r\n      contentError: null,\r\n    }),\r\n    [CONTENT_WRITE_POST_SUCCESS]: (state, { payload: content }) => ({\r\n      ...state,\r\n      content,\r\n    }),\r\n    [CONTENT_WRITE_POST_FAILURE]: (state, { payload: contentError }) => ({\r\n      ...state,\r\n      contentError,\r\n    }),\r\n    [SET_ORIGINAL_CONTENT]: (state, { payload: content }) => ({\r\n      ...state,\r\n      title: content.title,\r\n      body: content.body,\r\n      taggedContest: content.taggedContest,\r\n      taggedContestID: content.taggedContestID,\r\n      videoURL: content.videoURL,\r\n      team: content.team,\r\n      status: content.status,\r\n      github: content.github,\r\n      stars: content.stars,\r\n      originalContentId: content._id,\r\n    }),\r\n    [UPDATE_CONTENT_SUCCESS]: (state, { payload: content }) => ({\r\n      ...state,\r\n      content,\r\n    }),\r\n    [UPDATE_CONTENT_FAILURE]: (state, { payload: contentError }) => ({\r\n      ...state,\r\n      contentError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default contentWrite;\r\n"]},"metadata":{},"sourceType":"module"}