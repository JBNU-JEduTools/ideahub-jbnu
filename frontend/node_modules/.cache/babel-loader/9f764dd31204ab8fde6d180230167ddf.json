{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\skyai\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\skyai\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\r\n  modules 디렉토리: 리듀서 관리\r\n*/\nimport { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport { takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst _createRequestActionT = createRequestActionTypes('auth/REGISTER'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      REGISTER = _createRequestActionT2[0],\n      REGISTER_SUCCESS = _createRequestActionT2[1],\n      REGISTER_FAILURE = _createRequestActionT2[2];\n\nconst _createRequestActionT3 = createRequestActionTypes('auth/LOGIN'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      LOGIN = _createRequestActionT4[0],\n      LOGIN_SUCCESS = _createRequestActionT4[1],\n      LOGIN_FAILURE = _createRequestActionT4[2]; //action creating function\n\n\nexport const changeField = createAction(CHANGE_FIELD, ({\n  form,\n  key,\n  value\n}) => ({\n  form,\n  key,\n  value\n}));\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\nexport const register = createAction(REGISTER, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nexport const login = createAction(LOGIN, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n    name: '',\n    email: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n}; //reducer function\n\nconst auth = handleActions({\n  //createAction으로 액션을 만들면 액션에 필요한 추가 데이터는 payload라는 이름을 사용\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      form,\n      key,\n      value\n    }\n  }) => produce(state, draft => {\n    draft[form][key] = value;\n  }),\n  [INITIALIZE_FORM]: (state, {\n    payload: form\n  }) => _objectSpread({}, state, {\n    [form]: initialState[form],\n    authError: null\n  }),\n  [REGISTER_SUCCESS]: (state, {\n    payload: auth\n  }) => _objectSpread({}, state, {\n    authError: null,\n    auth\n  }),\n  [REGISTER_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    authError: error\n  }),\n  [LOGIN_SUCCESS]: (state, {\n    payload: auth\n  }) => _objectSpread({}, state, {\n    authError: null,\n    auth\n  }),\n  [LOGIN_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    authError: error\n  })\n}, initialState);\nexport default auth;","map":{"version":3,"sources":["C:\\Users\\skyai\\Desktop\\cmanager\\frontend\\src\\modules\\auth.js"],"names":["createAction","handleActions","produce","createRequestSaga","createRequestActionTypes","takeLatest","authAPI","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","authSaga","initialState","passwordConfirm","name","email","auth","authError","state","payload","draft","error"],"mappings":"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","sourcesContent":["/*\r\n  modules 디렉토리: 리듀서 관리\r\n*/\r\n\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER',\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN',\r\n);\r\n\r\n//action creating function\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form,\r\n    key,\r\n    value,\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n    name: '',\r\n    email: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n};\r\n\r\n//reducer function\r\nconst auth = handleActions(\r\n  {\r\n    //createAction으로 액션을 만들면 액션에 필요한 추가 데이터는 payload라는 이름을 사용\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, draft => {\r\n        draft[form][key] = value;\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null,\r\n    }),\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n"]},"metadata":{},"sourceType":"module"}