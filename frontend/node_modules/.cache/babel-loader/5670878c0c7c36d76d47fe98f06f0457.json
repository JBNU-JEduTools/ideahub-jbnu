{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\kirin\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\kirin\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as contentsAPI from '../lib/api/contents';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst _createRequestActionT = createRequestActionTypes('contents/LIST_CONTENTS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_CONTENTS = _createRequestActionT2[0],\n      LIST_CONTENTS_SUCCESS = _createRequestActionT2[1],\n      LIST_CONTENTS_FAILURE = _createRequestActionT2[2];\n\nexport const listContents = createAction(LIST_CONTENTS, ({\n  tag,\n  username,\n  page\n}) => ({\n  tag,\n  username,\n  page\n}));\nconst listContentsSaga = createRequestSaga(LIST_CONTENTS, contentsAPI.listContents);\nexport function* contentsSaga() {\n  yield takeLatest(LIST_CONTENTS, listContentsSaga);\n}\nconst initialState = {\n  contents: null,\n  error: null\n};\nconst contents = handleActions({\n  [LIST_CONTENTS_SUCCESS]: (state, {\n    payload: contents\n  }) => _objectSpread({}, state, {\n    contents\n  }),\n  [LIST_CONTENTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  })\n}, initialState);\nexport default contents;","map":{"version":3,"sources":["C:\\Users\\kirin\\Desktop\\cmanager\\frontend\\src\\modules\\contents.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","contentsAPI","takeLatest","LIST_CONTENTS","LIST_CONTENTS_SUCCESS","LIST_CONTENTS_FAILURE","listContents","tag","username","page","listContentsSaga","contentsSaga","initialState","contents","error","state","payload"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,WAAZ,MAA6B,qBAA7B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;8BAMIF,wBAAwB,CAAC,wBAAD,C;;MAH1BG,a;MACAC,qB;MACAC,qB;;AAGF,OAAO,MAAMC,YAAY,GAAGT,YAAY,CACtCM,aADsC,EAEtC,CAAC;AAAEI,EAAAA,GAAF;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA;AAAjB,CAAD,MAA8B;AAC5BF,EAAAA,GAD4B;AAE5BC,EAAAA,QAF4B;AAG5BC,EAAAA;AAH4B,CAA9B,CAFsC,CAAjC;AASP,MAAMC,gBAAgB,GAAGX,iBAAiB,CACxCI,aADwC,EAExCF,WAAW,CAACK,YAF4B,CAA1C;AAKA,OAAO,UAAUK,YAAV,GAAyB;AAC9B,QAAMT,UAAU,CAACC,aAAD,EAAgBO,gBAAhB,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,MAAMD,QAAQ,GAAGf,aAAa,CAC5B;AACE,GAACM,qBAAD,GAAyB,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACpBE,KADoB;AAEvBF,IAAAA;AAFuB,IAD3B;AAKE,GAACR,qBAAD,GAAyB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBACpBC,KADoB;AAEvBD,IAAAA;AAFuB;AAL3B,CAD4B,EAW5BF,YAX4B,CAA9B;AAcA,eAAeC,QAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as contentsAPI from '../lib/api/contents';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_CONTENTS,\r\n  LIST_CONTENTS_SUCCESS,\r\n  LIST_CONTENTS_FAILURE,\r\n] = createRequestActionTypes('contents/LIST_CONTENTS');\r\n\r\nexport const listContents = createAction(\r\n  LIST_CONTENTS,\r\n  ({ tag, username, page }) => ({\r\n    tag,\r\n    username,\r\n    page,\r\n  }),\r\n);\r\n\r\nconst listContentsSaga = createRequestSaga(\r\n  LIST_CONTENTS,\r\n  contentsAPI.listContents,\r\n);\r\n\r\nexport function* contentsSaga() {\r\n  yield takeLatest(LIST_CONTENTS, listContentsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  contents: null,\r\n  error: null,\r\n};\r\n\r\nconst contents = handleActions(\r\n  {\r\n    [LIST_CONTENTS_SUCCESS]: (state, { payload: contents }) => ({\r\n      ...state,\r\n      contents,\r\n    }),\r\n    [LIST_CONTENTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default contents;\r\n"]},"metadata":{},"sourceType":"module"}