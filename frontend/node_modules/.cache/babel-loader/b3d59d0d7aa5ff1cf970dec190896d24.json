{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\kirin\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\kirin\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nimport { stat } from 'fs';\n\nconst _createRequestActionT = createRequestActionTypes('posts/LIST_POSTS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_POSTS = _createRequestActionT2[0],\n      LIST_POSTS_SUCCESS = _createRequestActionT2[1],\n      LIST_POSTS_FAILURE = _createRequestActionT2[2];\n\nexport const listPosts = createAction(LIST_POSTS, ({\n  username,\n  page\n}) => ({\n  username,\n  page\n}));\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\nconst initialState = {\n  posts: null,\n  error: null\n};\nconst posts = handleActions({\n  [LIST_POSTS_SUCCESS]: (state, {\n    payload: posts\n  }) => _objectSpread({}, state, {\n    posts\n  }),\n  [LIST_POSTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  })\n}, initialState);\nexport default posts;","map":{"version":3,"sources":["C:\\Users\\kirin\\Desktop\\cmanager\\frontend\\src\\modules\\posts.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","stat","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","username","page","listPostsSaga","postsSaga","initialState","posts","error","state","payload"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,IAAT,QAAqB,IAArB;;8BAMIH,wBAAwB,CAAC,kBAAD,C;;MAH1BI,U;MACAC,kB;MACAC,kB;;AAGF,OAAO,MAAMC,SAAS,GAAGV,YAAY,CAACO,UAAD,EAAa,CAAC;AAAEI,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,MAAyB;AACzED,EAAAA,QADyE;AAEzEC,EAAAA;AAFyE,CAAzB,CAAb,CAA9B;AAKP,MAAMC,aAAa,GAAGX,iBAAiB,CAACK,UAAD,EAAaH,QAAQ,CAACM,SAAtB,CAAvC;AAEA,OAAO,UAAUI,SAAV,GAAsB;AAC3B,QAAMT,UAAU,CAACE,UAAD,EAAaM,aAAb,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,MAAMD,KAAK,GAAGf,aAAa,CACzB;AACE,GAACO,kBAAD,GAAsB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACjBE,KADiB;AAEpBF,IAAAA;AAFoB,IADxB;AAKE,GAACP,kBAAD,GAAsB,CAACS,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBACjBC,KADiB;AAEpBD,IAAAA;AAFoB;AALxB,CADyB,EAWzBF,YAXyB,CAA3B;AAcA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport { stat } from 'fs';\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(LIST_POSTS, ({ username, page }) => ({\r\n  username,\r\n  page,\r\n}));\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\n\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n      ...state,\r\n      posts,\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;\r\n"]},"metadata":{},"sourceType":"module"}