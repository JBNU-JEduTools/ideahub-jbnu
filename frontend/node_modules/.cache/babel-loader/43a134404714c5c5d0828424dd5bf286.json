{"ast":null,"code":"import _defineProperty from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as contentPostsAPI from '../lib/api/contentPosts';\nimport { takeLatest } from 'redux-saga/effects'; //action type\n\nconst SET_INITIAL_STATE = 'contentwrite/SET_INITIAL_STATE'; //taggedContest를 현재 contestName으로 초기화\n\nconst INITIALIZE = 'contentwrite/INITIALIZE'; //모든 내용 초기화\n\nconst CHANGE_FIELD = 'contentwrite/CHANGE_FIELD'; //특정 key값 바꾸기\n\nconst _createRequestActionT = createRequestActionTypes('contentwrite/CONTENT_WRITE_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      CONTENT_WRITE_POST = _createRequestActionT2[0],\n      CONTENT_WRITE_POST_SUCCESS = _createRequestActionT2[1],\n      CONTENT_WRITE_POST_FAILURE = _createRequestActionT2[2];\n\nconst SET_ORIGINAL_CONTENT = 'contentwrite/SET_ORIGINAL_CONTENT'; //콘텐츠 수정버튼 클릭 시 기존 정보를 상태에 넣기 위함\n\nconst _createRequestActionT3 = createRequestActionTypes('contentwrite/UPDATE_CONTENT'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      UPDATE_CONTENT = _createRequestActionT4[0],\n      UPDATE_CONTENT_SUCCESS = _createRequestActionT4[1],\n      UPDATE_CONTENT_FAILURE = _createRequestActionT4[2]; //포스트 수정\n//action creating functions\n\n\nexport const setInitialState = createAction(SET_INITIAL_STATE);\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const contentWritePost = createAction(CONTENT_WRITE_POST, ({\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n}) => ({\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n}));\nexport const setOriginalContent = createAction(SET_ORIGINAL_CONTENT, content => content);\nexport const updateContent = createAction(UPDATE_CONTENT, ({\n  id,\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n}) => ({\n  id,\n  title,\n  body,\n  taggedContest,\n  taggedContestID,\n  videoURL,\n  team,\n  status,\n  github\n})); //create saga\n\nconst contentWritePostSaga = createRequestSaga(CONTENT_WRITE_POST, contentPostsAPI.contentWritePost);\nconst updateContentSaga = createRequestSaga(UPDATE_CONTENT, contentPostsAPI.updateContent);\nexport function* contentWriteSaga() {\n  yield takeLatest(CONTENT_WRITE_POST, contentWritePostSaga);\n  yield takeLatest(UPDATE_CONTENT, updateContentSaga);\n} //initial state\n\nconst initialState = {\n  title: '',\n  body: '',\n  taggedContest: '',\n  taggedContestID: '',\n  videoURL: '',\n  team: '',\n  status: '',\n  github: '',\n  content: null,\n  contentError: null,\n  originalContentId: null\n}; //reducer\n\nconst contentWrite = handleActions({\n  [SET_INITIAL_STATE]: (state, {\n    payload: contestName\n  }) => _objectSpread({}, initialState, {\n    taggedContest: contestName.contestName,\n    taggedContestID: contestName.contestID\n  }),\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value\n  }),\n  [CONTENT_WRITE_POST]: state => _objectSpread({}, state, {\n    content: null,\n    contentError: null\n  }),\n  [CONTENT_WRITE_POST_SUCCESS]: (state, {\n    payload: content\n  }) => _objectSpread({}, state, {\n    content\n  }),\n  [CONTENT_WRITE_POST_FAILURE]: (state, {\n    payload: contentError\n  }) => _objectSpread({}, state, {\n    contentError\n  }),\n  [SET_ORIGINAL_CONTENT]: (state, {\n    payload: content\n  }) => _objectSpread({}, state, {\n    title: content.title,\n    body: content.body,\n    taggedContest: content.taggedContest,\n    taggedContestID: content.taggedContestID,\n    videoURL: content.videoURL,\n    team: content.team,\n    status: content.status,\n    github: content.github,\n    stars: content.stars,\n    originalContentId: content._id\n  }),\n  [UPDATE_CONTENT_SUCCESS]: (state, {\n    payload: content\n  }) => _objectSpread({}, state, {\n    content\n  }),\n  [UPDATE_CONTENT_FAILURE]: (state, {\n    payload: contentError\n  }) => _objectSpread({}, state, {\n    contentError\n  })\n}, initialState);\nexport default contentWrite;","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/modules/contentWrite.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","contentPostsAPI","takeLatest","SET_INITIAL_STATE","INITIALIZE","CHANGE_FIELD","CONTENT_WRITE_POST","CONTENT_WRITE_POST_SUCCESS","CONTENT_WRITE_POST_FAILURE","SET_ORIGINAL_CONTENT","UPDATE_CONTENT","UPDATE_CONTENT_SUCCESS","UPDATE_CONTENT_FAILURE","setInitialState","initialize","changeField","key","value","contentWritePost","title","body","taggedContest","taggedContestID","videoURL","team","status","github","setOriginalContent","content","updateContent","id","contentWritePostSaga","updateContentSaga","contentWriteSaga","initialState","contentError","originalContentId","contentWrite","state","payload","contestName","contestID","stars","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as contentPostsAPI from '../lib/api/contentPosts';\nimport { takeLatest } from 'redux-saga/effects';\n\n//action type\nconst SET_INITIAL_STATE = 'contentwrite/SET_INITIAL_STATE'; //taggedContest를 현재 contestName으로 초기화\nconst INITIALIZE = 'contentwrite/INITIALIZE'; //모든 내용 초기화\nconst CHANGE_FIELD = 'contentwrite/CHANGE_FIELD'; //특정 key값 바꾸기\nconst [\n  CONTENT_WRITE_POST,\n  CONTENT_WRITE_POST_SUCCESS,\n  CONTENT_WRITE_POST_FAILURE,\n] = createRequestActionTypes('contentwrite/CONTENT_WRITE_POST');\nconst SET_ORIGINAL_CONTENT = 'contentwrite/SET_ORIGINAL_CONTENT'; //콘텐츠 수정버튼 클릭 시 기존 정보를 상태에 넣기 위함\nconst [\n  UPDATE_CONTENT,\n  UPDATE_CONTENT_SUCCESS,\n  UPDATE_CONTENT_FAILURE,\n] = createRequestActionTypes('contentwrite/UPDATE_CONTENT'); //포스트 수정\n\n//action creating functions\nexport const setInitialState = createAction(SET_INITIAL_STATE);\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const contentWritePost = createAction(\n  CONTENT_WRITE_POST,\n  ({\n    title,\n    body,\n    taggedContest,\n    taggedContestID,\n    videoURL,\n    team,\n    status,\n    github,\n  }) => ({\n    title,\n    body,\n    taggedContest,\n    taggedContestID,\n    videoURL,\n    team,\n    status,\n    github,\n  }),\n);\nexport const setOriginalContent = createAction(\n  SET_ORIGINAL_CONTENT,\n  (content) => content,\n);\nexport const updateContent = createAction(\n  UPDATE_CONTENT,\n  ({\n    id,\n    title,\n    body,\n    taggedContest,\n    taggedContestID,\n    videoURL,\n    team,\n    status,\n    github,\n  }) => ({\n    id,\n    title,\n    body,\n    taggedContest,\n    taggedContestID,\n    videoURL,\n    team,\n    status,\n    github,\n  }),\n);\n\n//create saga\nconst contentWritePostSaga = createRequestSaga(\n  CONTENT_WRITE_POST,\n  contentPostsAPI.contentWritePost,\n);\nconst updateContentSaga = createRequestSaga(\n  UPDATE_CONTENT,\n  contentPostsAPI.updateContent,\n);\nexport function* contentWriteSaga() {\n  yield takeLatest(CONTENT_WRITE_POST, contentWritePostSaga);\n  yield takeLatest(UPDATE_CONTENT, updateContentSaga);\n}\n\n//initial state\nconst initialState = {\n  title: '',\n  body: '',\n  taggedContest: '',\n  taggedContestID: '',\n  videoURL: '',\n  team: '',\n  status: '',\n  github: '',\n  content: null,\n  contentError: null,\n  originalContentId: null,\n};\n\n//reducer\nconst contentWrite = handleActions(\n  {\n    [SET_INITIAL_STATE]: (state, { payload: contestName }) => ({\n      ...initialState,\n      taggedContest: contestName.contestName,\n      taggedContestID: contestName.contestID,\n    }),\n    [INITIALIZE]: (state) => initialState,\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [CONTENT_WRITE_POST]: (state) => ({\n      ...state,\n      content: null,\n      contentError: null,\n    }),\n    [CONTENT_WRITE_POST_SUCCESS]: (state, { payload: content }) => ({\n      ...state,\n      content,\n    }),\n    [CONTENT_WRITE_POST_FAILURE]: (state, { payload: contentError }) => ({\n      ...state,\n      contentError,\n    }),\n    [SET_ORIGINAL_CONTENT]: (state, { payload: content }) => ({\n      ...state,\n      title: content.title,\n      body: content.body,\n      taggedContest: content.taggedContest,\n      taggedContestID: content.taggedContestID,\n      videoURL: content.videoURL,\n      team: content.team,\n      status: content.status,\n      github: content.github,\n      stars: content.stars,\n      originalContentId: content._id,\n    }),\n    [UPDATE_CONTENT_SUCCESS]: (state, { payload: content }) => ({\n      ...state,\n      content,\n    }),\n    [UPDATE_CONTENT_FAILURE]: (state, { payload: contentError }) => ({\n      ...state,\n      contentError,\n    }),\n  },\n  initialState,\n);\n\nexport default contentWrite;\n"]},"metadata":{},"sourceType":"module"}