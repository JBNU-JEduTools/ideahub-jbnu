{"ast":null,"code":"var _jsxFileName = \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/containers/contentWrite/ContentWriteActionButtonsContainer.js\";\nimport React, { useEffect } from 'react';\nimport ContentWriteActionButtons from '../../components/contentWrite/ContentWriteActionButton';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { contentWritePost, updateContent } from '../../modules/contentWrite';\n\nconst ContentWriteActionButtonsContainer = ({\n  history\n}) => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    contentWrite\n  }) => ({\n    title: contentWrite.title,\n    body: contentWrite.body,\n    taggedContest: contentWrite.taggedContest,\n    taggedContestID: contentWrite.taggedContestID,\n    videoURL: contentWrite.videoURL,\n    team: contentWrite.team,\n    status: contentWrite.status,\n    github: contentWrite.github,\n    content: contentWrite.content,\n    contentError: contentWrite.contentError,\n    originalContentId: contentWrite.originalContentId\n  })),\n        title = _useSelector.title,\n        body = _useSelector.body,\n        taggedContest = _useSelector.taggedContest,\n        taggedContestID = _useSelector.taggedContestID,\n        videoURL = _useSelector.videoURL,\n        team = _useSelector.team,\n        status = _useSelector.status,\n        github = _useSelector.github,\n        content = _useSelector.content,\n        contentError = _useSelector.contentError,\n        originalContentId = _useSelector.originalContentId;\n\n  const onPublish = () => {\n    if (originalContentId) {\n      dispatch(updateContent({\n        title,\n        body,\n        taggedContest,\n        taggedContestID,\n        videoURL,\n        team,\n        status,\n        github,\n        id: originalContentId\n      }));\n      return;\n    }\n\n    dispatch(contentWritePost({\n      title,\n      body,\n      taggedContest,\n      taggedContestID,\n      videoURL,\n      team,\n      status,\n      github\n    }));\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  useEffect(() => {\n    if (content) {\n      const _id = content._id,\n            user = content.user;\n      history.push(\"/content/\".concat(_id));\n    }\n\n    if (contentError) {\n      console.log(contentError);\n    }\n  }, [history, content, contentError]);\n  return React.createElement(ContentWriteActionButtons, {\n    onPublish: onPublish,\n    onCancel: onCancel,\n    isEdit: !!originalContentId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(ContentWriteActionButtonsContainer);","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/containers/contentWrite/ContentWriteActionButtonsContainer.js"],"names":["React","useEffect","ContentWriteActionButtons","useSelector","useDispatch","withRouter","contentWritePost","updateContent","ContentWriteActionButtonsContainer","history","dispatch","contentWrite","title","body","taggedContest","taggedContestID","videoURL","team","status","github","content","contentError","originalContentId","onPublish","id","onCancel","goBack","_id","user","push","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport ContentWriteActionButtons from '../../components/contentWrite/ContentWriteActionButton';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { contentWritePost, updateContent } from '../../modules/contentWrite';\n\nconst ContentWriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const {\n    title,\n    body,\n    taggedContest,\n    taggedContestID,\n    videoURL,\n    team,\n    status,\n    github,\n    content,\n    contentError,\n    originalContentId,\n  } = useSelector(({ contentWrite }) => ({\n    title: contentWrite.title,\n    body: contentWrite.body,\n    taggedContest: contentWrite.taggedContest,\n    taggedContestID: contentWrite.taggedContestID,\n    videoURL: contentWrite.videoURL,\n    team: contentWrite.team,\n    status: contentWrite.status,\n    github: contentWrite.github,\n    content: contentWrite.content,\n    contentError: contentWrite.contentError,\n    originalContentId: contentWrite.originalContentId,\n  }));\n\n  const onPublish = () => {\n    if (originalContentId) {\n      dispatch(\n        updateContent({\n          title,\n          body,\n          taggedContest,\n          taggedContestID,\n          videoURL,\n          team,\n          status,\n          github,\n          id: originalContentId,\n        }),\n      );\n      return;\n    }\n    dispatch(\n      contentWritePost({\n        title,\n        body,\n        taggedContest,\n        taggedContestID,\n        videoURL,\n        team,\n        status,\n        github,\n      }),\n    );\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  useEffect(() => {\n    if (content) {\n      const { _id, user } = content;\n      history.push(`/content/${_id}`);\n    }\n    if (contentError) {\n      console.log(contentError);\n    }\n  }, [history, content, contentError]);\n  return (\n    <ContentWriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalContentId}\n    />\n  );\n};\n\nexport default withRouter(ContentWriteActionButtonsContainer);\n"]},"metadata":{},"sourceType":"module"}