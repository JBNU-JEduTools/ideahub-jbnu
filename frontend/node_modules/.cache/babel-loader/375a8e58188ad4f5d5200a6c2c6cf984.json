{"ast":null,"code":"import _defineProperty from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as contentsAPI from '../lib/api/contentPosts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst _createRequestActionT = createRequestActionTypes('contents/LIST_CONTENTS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_CONTENTS = _createRequestActionT2[0],\n      LIST_CONTENTS_SUCCESS = _createRequestActionT2[1],\n      LIST_CONTENTS_FAILURE = _createRequestActionT2[2];\n\nexport const listContents = createAction(LIST_CONTENTS, ({\n  taggedContestID,\n  page\n}) => ({\n  taggedContestID,\n  page\n}));\nconst listContentsSaga = createRequestSaga(LIST_CONTENTS, contentsAPI.listContents);\nexport function* contentsSaga() {\n  yield takeLatest(LIST_CONTENTS, listContentsSaga);\n}\nconst initialState = {\n  contents: null,\n  error: null,\n  lastPage: 1\n};\nconst contents = handleActions({\n  [LIST_CONTENTS_SUCCESS]: (state, {\n    payload: contents,\n    meta: response\n  }) => _objectSpread({}, state, {\n    contents,\n    lastPage: parseInt(response.headers['last-page'], 10)\n  }),\n  [LIST_CONTENTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  })\n}, initialState);\nexport default contents;","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/modules/contents.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","contentsAPI","takeLatest","LIST_CONTENTS","LIST_CONTENTS_SUCCESS","LIST_CONTENTS_FAILURE","listContents","taggedContestID","page","listContentsSaga","contentsSaga","initialState","contents","error","lastPage","state","payload","meta","response","parseInt","headers"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,WAAZ,MAA6B,yBAA7B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;8BAMIF,wBAAwB,CAAC,wBAAD,C;;MAH1BG,a;MACAC,qB;MACAC,qB;;AAGF,OAAO,MAAMC,YAAY,GAAGT,YAAY,CACtCM,aADsC,EAEtC,CAAC;AAAEI,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,CAAD,MAAgC;AAC9BD,EAAAA,eAD8B;AAE9BC,EAAAA;AAF8B,CAAhC,CAFsC,CAAjC;AAQP,MAAMC,gBAAgB,GAAGV,iBAAiB,CACxCI,aADwC,EAExCF,WAAW,CAACK,YAF4B,CAA1C;AAKA,OAAO,UAAUI,YAAV,GAAyB;AAC9B,QAAMR,UAAU,CAACC,aAAD,EAAgBM,gBAAhB,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,MAAMF,QAAQ,GAAGd,aAAa,CAC5B;AACE,GAACM,qBAAD,GAAyB,CACvBW,KADuB,EAEvB;AAAEC,IAAAA,OAAO,EAAEJ,QAAX;AAAqBK,IAAAA,IAAI,EAAEC;AAA3B,GAFuB,uBAIpBH,KAJoB;AAKvBH,IAAAA,QALuB;AAMvBE,IAAAA,QAAQ,EAAEK,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,WAAjB,CAAD,EAAgC,EAAhC;AANK,IAD3B;AASE,GAACf,qBAAD,GAAyB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACpBE,KADoB;AAEvBF,IAAAA;AAFuB;AAT3B,CAD4B,EAe5BF,YAf4B,CAA9B;AAkBA,eAAeC,QAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as contentsAPI from '../lib/api/contentPosts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  LIST_CONTENTS,\n  LIST_CONTENTS_SUCCESS,\n  LIST_CONTENTS_FAILURE,\n] = createRequestActionTypes('contents/LIST_CONTENTS');\n\nexport const listContents = createAction(\n  LIST_CONTENTS,\n  ({ taggedContestID, page }) => ({\n    taggedContestID,\n    page,\n  }),\n);\n\nconst listContentsSaga = createRequestSaga(\n  LIST_CONTENTS,\n  contentsAPI.listContents,\n);\n\nexport function* contentsSaga() {\n  yield takeLatest(LIST_CONTENTS, listContentsSaga);\n}\n\nconst initialState = {\n  contents: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst contents = handleActions(\n  {\n    [LIST_CONTENTS_SUCCESS]: (\n      state,\n      { payload: contents, meta: response },\n    ) => ({\n      ...state,\n      contents,\n      lastPage: parseInt(response.headers['last-page'], 10),\n    }),\n    [LIST_CONTENTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default contents;\n"]},"metadata":{},"sourceType":"module"}