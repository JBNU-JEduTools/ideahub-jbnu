{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects'; //===========Action Types==============\n\n/*\r\n  READ_POST = 'post/READ_POST';\r\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\r\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\r\n*/\n\nconst _createRequestActionT = createRequestActionTypes('post/READ_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      READ_POST = _createRequestActionT2[0],\n      READ_POST_SUCCESS = _createRequestActionT2[1],\n      READ_POST_FAILURE = _createRequestActionT2[2];\n\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\n\nconst _createRequestActionT3 = createRequestActionTypes('post/LIST_CONTENT_ITEM'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      LIST_CONTENT_ITEM = _createRequestActionT4[0],\n      LIST_CONTENT_ITEM_SUCCESS = _createRequestActionT4[1],\n      LIST_CONTENT_ITEM_FAILURE = _createRequestActionT4[2]; //===========Action 생성 함수==============\n\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\nexport const listContentItem = createAction(LIST_CONTENT_ITEM); //===========사가 생성==============\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nconst listContentItemSaga = createRequestSaga(LIST_CONTENT_ITEM, postsAPI.listContentItem);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n  yield takeLatest(LIST_CONTENT_ITEM, listContentItemSaga);\n} //===========initial state============\n\nconst initialState = {\n  post: null,\n  error: null,\n  contentsList: null,\n  listError: null\n}; //==============reducer================\n\nconst post = handleActions({\n  //actionType: (state, action) => newState\n  [READ_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [READ_POST_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  [LIST_CONTENT_ITEM_SUCCESS]: (state, {\n    payload: {\n      post,\n      contentsList\n    }\n  }) => {\n    let copyOfContentsList = JSON.parse(JSON.stringify(contentsList));\n    console.log(copyOfContentsList);\n\n    while (true) {\n      //copyOfContentsList의 각 요소의 taggedContest가 현재 대회의 title과 같지 않다면, 그 요소를 배열에서 삭제함.\n      const itemToFind = copyOfContentsList.find(item => item.taggedContest !== post.title);\n      const indexToRemove = copyOfContentsList.indexOf(itemToFind); //삭제할 요소를 찾았다면 삭제 후 루프.\n\n      if (indexToRemove > -1) {\n        copyOfContentsList.splice(indexToRemove, 1);\n        console.log(copyOfContentsList);\n      } //찾지 못했다면, copyOfContentsList에 속한 모든 요소가 현재 대회에 속한 작품이라는 뜻이므로, 그대로 상태에 전달.\n      else break;\n    }\n\n    return _objectSpread({}, state, {\n      contentList: copyOfContentsList\n    });\n  },\n  [LIST_CONTENT_ITEM_FAILURE]: (state, {\n    payload: listError\n  }) => _objectSpread({}, state, {\n    listError\n  }),\n  //flushes data, leaving post page.\n  [UNLOAD_POST]: () => initialState\n}, initialState);\nexport default post;","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/modules/post.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","LIST_CONTENT_ITEM","LIST_CONTENT_ITEM_SUCCESS","LIST_CONTENT_ITEM_FAILURE","readPost","id","unloadPost","listContentItem","readPostSaga","listContentItemSaga","postSaga","initialState","post","error","contentsList","listError","state","payload","copyOfContentsList","JSON","parse","stringify","console","log","itemToFind","find","item","taggedContest","title","indexToRemove","indexOf","splice","contentList"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n//===========Action Types==============\r\n\r\n/*\r\n  READ_POST = 'post/READ_POST';\r\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\r\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\r\n*/\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\r\n\r\nconst [\r\n  LIST_CONTENT_ITEM,\r\n  LIST_CONTENT_ITEM_SUCCESS,\r\n  LIST_CONTENT_ITEM_FAILURE,\r\n] = createRequestActionTypes('post/LIST_CONTENT_ITEM');\r\n\r\n//===========Action 생성 함수==============\r\n\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nexport const listContentItem = createAction(LIST_CONTENT_ITEM);\r\n\r\n//===========사가 생성==============\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\n\r\nconst listContentItemSaga = createRequestSaga(\r\n  LIST_CONTENT_ITEM,\r\n  postsAPI.listContentItem,\r\n);\r\n\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n  yield takeLatest(LIST_CONTENT_ITEM, listContentItemSaga);\r\n}\r\n\r\n//===========initial state============\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n  contentsList: null,\r\n  listError: null,\r\n};\r\n\r\n//==============reducer================\r\nconst post = handleActions(\r\n  {\r\n    //actionType: (state, action) => newState\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [LIST_CONTENT_ITEM_SUCCESS]: (\r\n      state,\r\n      { payload: { post, contentsList } },\r\n    ) => {\r\n      let copyOfContentsList = JSON.parse(JSON.stringify(contentsList));\r\n      console.log(copyOfContentsList);\r\n      while (true) {\r\n        //copyOfContentsList의 각 요소의 taggedContest가 현재 대회의 title과 같지 않다면, 그 요소를 배열에서 삭제함.\r\n        const itemToFind = copyOfContentsList.find(\r\n          item => item.taggedContest !== post.title,\r\n        );\r\n        const indexToRemove = copyOfContentsList.indexOf(itemToFind);\r\n        //삭제할 요소를 찾았다면 삭제 후 루프.\r\n        if (indexToRemove > -1) {\r\n          copyOfContentsList.splice(indexToRemove, 1);\r\n          console.log(copyOfContentsList);\r\n        }\r\n        //찾지 못했다면, copyOfContentsList에 속한 모든 요소가 현재 대회에 속한 작품이라는 뜻이므로, 그대로 상태에 전달.\r\n        else break;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        contentList: copyOfContentsList,\r\n      };\r\n    },\r\n    [LIST_CONTENT_ITEM_FAILURE]: (state, { payload: listError }) => ({\r\n      ...state,\r\n      listError,\r\n    }),\r\n    //flushes data, leaving post page.\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n"]},"metadata":{},"sourceType":"module"}