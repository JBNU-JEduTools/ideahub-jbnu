{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\components\\\\post\\\\PrizedList.js\";\n\nfunction _templateObject7() {\n  const data = _taggedTemplateLiteral([\"\\n  height: 100;\\n  border-right: 3px solid \", \";\\n  margin-right: 2rem;\\n  h1 {\\n    font-weight: 500;\\n    height: 100%;\\n    color: \", \";\\n    margin: 0;\\n    margin-right: 2rem;\\n  }\\n\"]);\n\n  _templateObject7 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  padding: 0 3rem;\\n\"]);\n\n  _templateObject6 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  display: flex;\\n  margin: 5rem 0;\\n  justify-content: center;\\n  img {\\n    height: 15rem;\\n    @media (max-width: 1152px) {\\n      height: 8rem;\\n    }\\n    @media (max-width: 768px) {\\n      height: 5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  @font-face {\\n    font-family: 'MapoGoldenPier';\\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.1/MapoGoldenPierA.woff')\\n      format('woff');\\n    font-weight: normal;\\n    font-style: normal;\\n  }\\n\\n  text-align: center;\\n  color: \", \";\\n\\n  h1 {\\n    font-size: 3rem;\\n    margin: 0;\\n    font-family: 'MapoGoldenPier';\\n    font-weight: 500;\\n    margin-top: 2rem;\\n    @media (max-width: 1152px) {\\n      font-size: 2rem;\\n      margin-top: 0.5rem;\\n    }\\n    @media (max-width: 768px) {\\n      font-size: 1rem;\\n      margin-top: 0.8rem;\\n    }\\n  }\\n  h2 {\\n    font-size: 6rem;\\n    margin: 0;\\n    font-family: 'MapoGoldenPier';\\n    font-weight: 500;\\n    @media (max-width: 1152px) {\\n      font-size: 4rem;\\n    }\\n    @media (max-width: 768px) {\\n      font-size: 1.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  float: right;\\n  padding: 1rem;\\n  border: 1px solid \", \";\\n  border-radius: 5px;\\n  margin-bottom: 0.5rem;\\n  word-break: break-all;\\n  background: white;\\n  color: black;\\n  p {\\n    margin-top: 2rem;\\n    margin-bottom: 2rem;\\n  }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  margin-top: 3rem;\\n  display: inline;\\n  align-content: center;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  background: #fbf8ef;\\n  padding: 3rem 0;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n//수상 작품 목록이 등록되어 있을 경우, 그 목록을 보여주는 컴포넌트.\nimport React from 'react';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport prizeLeft from '../../images/prizeLeft.png';\nimport prizeRight from '../../images/prizeRight.png';\nconst WholeContentsHolder = styled.div(_templateObject());\nconst PrizedListHolder = styled(Responsive)(_templateObject2());\nconst PrizedItemHolder = styled(Link)(_templateObject3(), palette.mainColor); //대회 제목 & '수상 작품 목록' 글자 홀더\n\nconst TitleHolder = styled.div(_templateObject4(), palette.gray[8]);\nconst TitleImgHolder = styled.div(_templateObject5()); //수상 순위와 그 순위에 해당하는 작품들을 감싸는 div\n\nconst ListByPrizeHolder = styled.div(_templateObject6()); //수상 순위를 표현\n\nconst PrizePriority = styled.div(_templateObject7(), palette.mainColor, palette.mainColor); //prizedItem는 post 객체 내의 배열 prized의 각각의 element를 나타냄.\n\nconst PrizedItem = ({\n  prizedItem\n}) => {\n  const _id = prizedItem._id,\n        title = prizedItem.title,\n        team = prizedItem.team;\n  return React.createElement(PrizedItemHolder, {\n    to: \"/content/\".concat(_id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, title), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, team));\n}; //prized는 post 객체 내의 배열 prized. prizedItem 객체의 배열임.\n//수정: 해당 대회에 속한 작품들의 리스트인 'contentList' 에서, 우선순위가 정해진 작품들만 로드\n\n\nconst PrizedList = ({\n  prized,\n  post,\n  loading\n}) => {\n  const title = post.title; //수상작 목록을 우선 순위별로 정렬\n\n  prized.sort((prized1, prized2) => {\n    return prized1.prizedPlace <= prized2.prizedPlace ? -1 : 1;\n  });\n\n  const showPrizedListHandler = () => {\n    const maxPriority = prized[prized.length - 1].prizedPlace;\n    return showPrizedList(1, prized, maxPriority);\n  };\n\n  const showPrizedList = (currentPriority, prized, maxPriority) => {\n    if (currentPriority > maxPriority) return null;\n    console.log('showPrizedList called.');\n    console.log('currentPriority: ', currentPriority);\n    console.log('maxPriority: ', maxPriority);\n    console.log('prized: ', prized); //수상 작품 목록 중 우선순위가 currentPriority와 같은 것들만 골라 리스트를 만듦.\n\n    let tempPrized = prized.filter(item => {\n      return item.prizedPlace == currentPriority; //item.prizedPlace의 type은 string이므로, ==를 사용.(형변환 후 비교)\n    });\n    console.log('tempPrized: ', tempPrized);\n\n    if (currentPriority < maxPriority) {\n      return React.createElement(ListByPrizeHolder, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(PrizePriority, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, currentPriority, \" \\uC704\")), !loading && prized && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, tempPrized.map(item => {\n        return React.createElement(PrizedItem, {\n          prizedItem: item,\n          key: item._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }); //key를 지정하는 이유: 리스트 내부의 어떤 item 정보가 변경되었을 경우, list 전체를 리렌더링 하지 않고, 그 item만 리렌더링 하기 위해.\n      })));\n    } else {\n      return showPrizedList(currentPriority + 1, prized, maxPriority);\n    }\n  };\n\n  return React.createElement(WholeContentsHolder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(TitleImgHolder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: prizeLeft,\n    alter: \"prizeLeft\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(TitleHolder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, title), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"\\uC218\\uC0C1 \\uC791\\uD488 \\uBAA9\\uB85D\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"\\uC791\\uD488 \\uBA85\\uC744 \\uD074\\uB9AD\\uD558\\uBA74 \\uD574\\uB2F9 \\uC791\\uD488 \\uD398\\uC774\\uC9C0\\uB85C \\uC774\\uB3D9\\uD569\\uB2C8\\uB2E4\")), React.createElement(\"img\", {\n    src: prizeRight,\n    alter: \"prizeRight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  })), React.createElement(PrizedListHolder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(ListByPrizeHolder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, showPrizedListHandler())));\n};\n\nexport default PrizedList;","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\components\\post\\PrizedList.js"],"names":["React","palette","Link","styled","Responsive","prizeLeft","prizeRight","WholeContentsHolder","div","PrizedListHolder","PrizedItemHolder","mainColor","TitleHolder","gray","TitleImgHolder","ListByPrizeHolder","PrizePriority","PrizedItem","prizedItem","_id","title","team","PrizedList","prized","post","loading","sort","prized1","prized2","prizedPlace","showPrizedListHandler","maxPriority","length","showPrizedList","currentPriority","console","log","tempPrized","filter","item","map"],"mappings":"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","sourcesContent":["//수상 작품 목록이 등록되어 있을 경우, 그 목록을 보여주는 컴포넌트.\r\n\r\nimport React from 'react';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport prizeLeft from '../../images/prizeLeft.png';\r\nimport prizeRight from '../../images/prizeRight.png';\r\n\r\nconst WholeContentsHolder = styled.div`\r\n  background: #fbf8ef;\r\n  padding: 3rem 0;\r\n`;\r\n\r\nconst PrizedListHolder = styled(Responsive)`\r\n  margin-top: 3rem;\r\n  display: inline;\r\n  align-content: center;\r\n`;\r\n\r\nconst PrizedItemHolder = styled(Link)`\r\n  width: 100%;\r\n  float: right;\r\n  padding: 1rem;\r\n  border: 1px solid ${palette.mainColor};\r\n  border-radius: 5px;\r\n  margin-bottom: 0.5rem;\r\n  word-break: break-all;\r\n  background: white;\r\n  color: black;\r\n  p {\r\n    margin-top: 2rem;\r\n    margin-bottom: 2rem;\r\n  }\r\n`;\r\n\r\n//대회 제목 & '수상 작품 목록' 글자 홀더\r\nconst TitleHolder = styled.div`\r\n  @font-face {\r\n    font-family: 'MapoGoldenPier';\r\n    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.1/MapoGoldenPierA.woff')\r\n      format('woff');\r\n    font-weight: normal;\r\n    font-style: normal;\r\n  }\r\n\r\n  text-align: center;\r\n  color: ${palette.gray[8]};\r\n\r\n  h1 {\r\n    font-size: 3rem;\r\n    margin: 0;\r\n    font-family: 'MapoGoldenPier';\r\n    font-weight: 500;\r\n    margin-top: 2rem;\r\n    @media (max-width: 1152px) {\r\n      font-size: 2rem;\r\n      margin-top: 0.5rem;\r\n    }\r\n    @media (max-width: 768px) {\r\n      font-size: 1rem;\r\n      margin-top: 0.8rem;\r\n    }\r\n  }\r\n  h2 {\r\n    font-size: 6rem;\r\n    margin: 0;\r\n    font-family: 'MapoGoldenPier';\r\n    font-weight: 500;\r\n    @media (max-width: 1152px) {\r\n      font-size: 4rem;\r\n    }\r\n    @media (max-width: 768px) {\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst TitleImgHolder = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 5rem 0;\r\n  justify-content: center;\r\n  img {\r\n    height: 15rem;\r\n    @media (max-width: 1152px) {\r\n      height: 8rem;\r\n    }\r\n    @media (max-width: 768px) {\r\n      height: 5rem;\r\n    }\r\n  }\r\n`;\r\n\r\n//수상 순위와 그 순위에 해당하는 작품들을 감싸는 div\r\nconst ListByPrizeHolder = styled.div`\r\n  display: flex;\r\n  padding: 0 3rem;\r\n`;\r\n\r\n//수상 순위를 표현\r\nconst PrizePriority = styled.div`\r\n  height: 100;\r\n  border-right: 3px solid ${palette.mainColor};\r\n  margin-right: 2rem;\r\n  h1 {\r\n    font-weight: 500;\r\n    height: 100%;\r\n    color: ${palette.mainColor};\r\n    margin: 0;\r\n    margin-right: 2rem;\r\n  }\r\n`;\r\n\r\n//prizedItem는 post 객체 내의 배열 prized의 각각의 element를 나타냄.\r\nconst PrizedItem = ({ prizedItem }) => {\r\n  const { _id, title, team } = prizedItem;\r\n  return (\r\n    <PrizedItemHolder to={`/content/${_id}`}>\r\n      <h1>{title}</h1>\r\n      <h2>{team}</h2>\r\n    </PrizedItemHolder>\r\n  );\r\n};\r\n\r\n//prized는 post 객체 내의 배열 prized. prizedItem 객체의 배열임.\r\n//수정: 해당 대회에 속한 작품들의 리스트인 'contentList' 에서, 우선순위가 정해진 작품들만 로드\r\n\r\nconst PrizedList = ({ prized, post, loading }) => {\r\n  const { title } = post;\r\n\r\n  //수상작 목록을 우선 순위별로 정렬\r\n  prized.sort((prized1, prized2) => {\r\n    return prized1.prizedPlace <= prized2.prizedPlace ? -1 : 1;\r\n  });\r\n\r\n  const showPrizedListHandler = () => {\r\n    const maxPriority = prized[prized.length - 1].prizedPlace;\r\n    return showPrizedList(1, prized, maxPriority);\r\n  };\r\n\r\n  const showPrizedList = (currentPriority, prized, maxPriority) => {\r\n    if (currentPriority > maxPriority) return null;\r\n    console.log('showPrizedList called.');\r\n    console.log('currentPriority: ', currentPriority);\r\n    console.log('maxPriority: ', maxPriority);\r\n    console.log('prized: ', prized);\r\n\r\n    //수상 작품 목록 중 우선순위가 currentPriority와 같은 것들만 골라 리스트를 만듦.\r\n    let tempPrized = prized.filter(item => {\r\n      return item.prizedPlace == currentPriority; //item.prizedPlace의 type은 string이므로, ==를 사용.(형변환 후 비교)\r\n    });\r\n\r\n    console.log('tempPrized: ', tempPrized);\r\n\r\n    if (currentPriority < maxPriority) {\r\n      return (\r\n        <ListByPrizeHolder>\r\n          <PrizePriority>\r\n            <h1>{currentPriority} 위</h1>\r\n          </PrizePriority>\r\n          {!loading && prized && (\r\n            <div>\r\n              {tempPrized.map(item => {\r\n                return <PrizedItem prizedItem={item} key={item._id} />; //key를 지정하는 이유: 리스트 내부의 어떤 item 정보가 변경되었을 경우, list 전체를 리렌더링 하지 않고, 그 item만 리렌더링 하기 위해.\r\n              })}\r\n            </div>\r\n          )}\r\n        </ListByPrizeHolder>\r\n      );\r\n    } else {\r\n      return showPrizedList(currentPriority + 1, prized, maxPriority);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WholeContentsHolder>\r\n      <TitleImgHolder>\r\n        <img src={prizeLeft} alter=\"prizeLeft\" />\r\n        <TitleHolder>\r\n          <h1>{title}</h1>\r\n          <h2>수상 작품 목록</h2>\r\n          <p>작품 명을 클릭하면 해당 작품 페이지로 이동합니다</p>\r\n        </TitleHolder>\r\n        <img src={prizeRight} alter=\"prizeRight\" />\r\n      </TitleImgHolder>\r\n      <PrizedListHolder>\r\n        <ListByPrizeHolder>\r\n          {/* <PrizePriority>\r\n            <h1>1 위</h1>\r\n          </PrizePriority>\r\n          <div>\r\n            {prized.map(prizedItem => {\r\n              return (\r\n                <PrizedItem prizedItem={prizedItem} key={prizedItem._id} />\r\n              );\r\n            })}\r\n          </div> */}\r\n          {showPrizedListHandler()}\r\n        </ListByPrizeHolder>\r\n      </PrizedListHolder>\r\n    </WholeContentsHolder>\r\n  );\r\n};\r\n\r\nexport default PrizedList;\r\n"]},"metadata":{},"sourceType":"module"}