{"ast":null,"code":"import _defineProperty from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects'; //===========Action Types==============\n\n/*\n  READ_POST = 'post/READ_POST';\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\n*/\n\nconst _createRequestActionT = createRequestActionTypes('post/READ_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      READ_POST = _createRequestActionT2[0],\n      READ_POST_SUCCESS = _createRequestActionT2[1],\n      READ_POST_FAILURE = _createRequestActionT2[2];\n\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\n\nconst _createRequestActionT3 = createRequestActionTypes('post/LIST_CONTENT_ITEM'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      LIST_CONTENT_ITEM = _createRequestActionT4[0],\n      LIST_CONTENT_ITEM_SUCCESS = _createRequestActionT4[1],\n      LIST_CONTENT_ITEM_FAILURE = _createRequestActionT4[2]; //===========Action 생성 함수==============\n\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\nexport const listContentItem = createAction(LIST_CONTENT_ITEM); //===========사가 생성==============\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nconst listContentItemSaga = createRequestSaga(LIST_CONTENT_ITEM, postsAPI.listContentItem);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n  yield takeLatest(LIST_CONTENT_ITEM, listContentItemSaga);\n} //===========initial state============\n\nconst initialState = {\n  post: null,\n  error: null,\n  contentsList: null,\n  listError: null\n}; //==============reducer================\n\nconst post = handleActions({\n  //actionType: (state, action) => newState\n  [READ_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [READ_POST_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  [LIST_CONTENT_ITEM_SUCCESS]: (state, {\n    payload: contentsList\n  }) => _objectSpread({}, state, {\n    contentsList\n  }),\n  [LIST_CONTENT_ITEM_FAILURE]: (state, {\n    payload: listError\n  }) => _objectSpread({}, state, {\n    listError\n  }),\n  //flushes data, leaving post page.\n  [UNLOAD_POST]: () => initialState\n}, initialState);\nexport default post;","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/modules/post.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","LIST_CONTENT_ITEM","LIST_CONTENT_ITEM_SUCCESS","LIST_CONTENT_ITEM_FAILURE","readPost","id","unloadPost","listContentItem","readPostSaga","listContentItemSaga","postSaga","initialState","post","error","contentsList","listError","state","payload"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;AAEA;;;;;;8BASIF,wBAAwB,CAAC,gBAAD,C;;MAH1BG,S;MACAC,iB;MACAC,iB;;AAEF,MAAMC,WAAW,GAAG,kBAApB,C,CAAwC;;+BAMpCN,wBAAwB,CAAC,wBAAD,C;;MAH1BO,iB;MACAC,yB;MACAC,yB,8BAGF;;;AAEA,OAAO,MAAMC,QAAQ,GAAGb,YAAY,CAACM,SAAD,EAAYQ,EAAE,IAAIA,EAAlB,CAA7B;AACP,OAAO,MAAMC,UAAU,GAAGf,YAAY,CAACS,WAAD,CAA/B;AAEP,OAAO,MAAMO,eAAe,GAAGhB,YAAY,CAACU,iBAAD,CAApC,C,CAEP;;AAEA,MAAMO,YAAY,GAAGf,iBAAiB,CAACI,SAAD,EAAYF,QAAQ,CAACS,QAArB,CAAtC;AAEA,MAAMK,mBAAmB,GAAGhB,iBAAiB,CAC3CQ,iBAD2C,EAE3CN,QAAQ,CAACY,eAFkC,CAA7C;AAKA,OAAO,UAAUG,QAAV,GAAqB;AAC1B,QAAMd,UAAU,CAACC,SAAD,EAAYW,YAAZ,CAAhB;AACA,QAAMZ,UAAU,CAACK,iBAAD,EAAoBQ,mBAApB,CAAhB;AACD,C,CAED;;AACA,MAAME,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,YAAY,EAAE,IAHK;AAInBC,EAAAA,SAAS,EAAE;AAJQ,CAArB,C,CAOA;;AACA,MAAMH,IAAI,GAAGpB,aAAa,CACxB;AACE;AACA,GAACM,iBAAD,GAAqB,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEL;AAAX,GAAR,uBAChBI,KADgB;AAEnBJ,IAAAA;AAFmB,IAFvB;AAME,GAACb,iBAAD,GAAqB,CAACiB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,uBAChBG,KADgB;AAEnBH,IAAAA;AAFmB,IANvB;AAUE,GAACX,yBAAD,GAA6B,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACxBE,KADwB;AAE3BF,IAAAA;AAF2B,IAV/B;AAcE,GAACX,yBAAD,GAA6B,CAACa,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBACxBC,KADwB;AAE3BD,IAAAA;AAF2B,IAd/B;AAkBE;AACA,GAACf,WAAD,GAAe,MAAMW;AAnBvB,CADwB,EAsBxBA,YAtBwB,CAA1B;AAyBA,eAAeC,IAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\n//===========Action Types==============\n\n/*\n  READ_POST = 'post/READ_POST';\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\n*/\nconst [\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n] = createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\n\nconst [\n  LIST_CONTENT_ITEM,\n  LIST_CONTENT_ITEM_SUCCESS,\n  LIST_CONTENT_ITEM_FAILURE,\n] = createRequestActionTypes('post/LIST_CONTENT_ITEM');\n\n//===========Action 생성 함수==============\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nexport const listContentItem = createAction(LIST_CONTENT_ITEM);\n\n//===========사가 생성==============\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\n\nconst listContentItemSaga = createRequestSaga(\n  LIST_CONTENT_ITEM,\n  postsAPI.listContentItem,\n);\n\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n  yield takeLatest(LIST_CONTENT_ITEM, listContentItemSaga);\n}\n\n//===========initial state============\nconst initialState = {\n  post: null,\n  error: null,\n  contentsList: null,\n  listError: null,\n};\n\n//==============reducer================\nconst post = handleActions(\n  {\n    //actionType: (state, action) => newState\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [LIST_CONTENT_ITEM_SUCCESS]: (state, { payload: contentsList }) => ({\n      ...state,\n      contentsList,\n    }),\n    [LIST_CONTENT_ITEM_FAILURE]: (state, { payload: listError }) => ({\n      ...state,\n      listError,\n    }),\n    //flushes data, leaving post page.\n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;\n"]},"metadata":{},"sourceType":"module"}