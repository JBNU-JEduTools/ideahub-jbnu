{"ast":null,"code":"/**\r\n * Export.\r\n */\nmodule.exports = toNoCase;\n/**\r\n * Test whether a string is camel-case.\r\n */\n\nvar hasSpace = /\\s/;\nvar hasSeparator = /(_|-|\\.|:)/;\nvar hasCamel = /([a-z][A-Z]|[A-Z][a-z])/;\n/**\r\n * Remove any starting case from a `string`, like camel or snake, but keep\r\n * spaces and punctuation that may be important otherwise.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\n\nfunction toNoCase(string) {\n  if (hasSpace.test(string)) return string.toLowerCase();\n  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase();\n  if (hasCamel.test(string)) return uncamelize(string).toLowerCase();\n  return string.toLowerCase();\n}\n/**\r\n * Separator splitter.\r\n */\n\n\nvar separatorSplitter = /[\\W_]+(.|$)/g;\n/**\r\n * Un-separate a `string`.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\n\nfunction unseparate(string) {\n  return string.replace(separatorSplitter, function (m, next) {\n    return next ? ' ' + next : '';\n  });\n}\n/**\r\n * Camelcase splitter.\r\n */\n\n\nvar camelSplitter = /(.)([A-Z]+)/g;\n/**\r\n * Un-camelcase a `string`.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\n\nfunction uncamelize(string) {\n  return string.replace(camelSplitter, function (m, previous, uppers) {\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ');\n  });\n}","map":null,"metadata":{},"sourceType":"script"}