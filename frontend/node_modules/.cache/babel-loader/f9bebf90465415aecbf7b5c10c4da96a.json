{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//리덕스에 사용될 액션 타입, 액션 생성함수, 리듀서 등을 정의.\n//user 정보를 얻거나 수정.\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as usersAPI from '../lib/api/users';\nimport { takeLatest } from 'redux-saga/effects'; //==============액션 타입 정의=============\n\nconst _createRequestActionT = createRequestActionTypes('users/LIST_USERS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_USERS = _createRequestActionT2[0],\n      LIST_USERS_SUCCESS = _createRequestActionT2[1],\n      LIST_USERS_FAILURE = _createRequestActionT2[2]; //유저 정보를 변경하는 액션\n\n\nconst UPDATE_USERS = 'users/UPDATE_USERS'; //==========액션 생성 함수===============\n\nexport const listUsers = createAction(LIST_USERS);\nexport const updateUsers = createAction(UPDATE_USERS); //=========리덕스 사가 생성==============\n\nconst listUsersSaga = createRequestSaga(LIST_USERS, usersAPI.listUsers);\nconst updateUsersSaga = createRequestSaga(UPDATE_USERS, usersAPI.updateUsers);\nexport function* usersSaga() {\n  yield takeLatest(LIST_USERS, listUsersSaga);\n  yield takeLatest(UPDATE_USERS, updateUsersSaga);\n} //=========initial state (초기 상태) 정의===========\n\nconst initialSate = {\n  users: null,\n  error: null\n}; //=========리듀서 정의============\n//************유저 상태를 변경하는 리듀서 필요.*******************\n\nconst users = handleActions({\n  [LIST_USERS_SUCCESS]: (state, {\n    payload: users\n  }) => _objectSpread({}, state, {\n    users\n  }),\n  [LIST_USERS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  //확인 필요\n  [UPDATE_USERS]: (state, {\n    payload: users\n  }) => _objectSpread({}, state, {\n    users\n  })\n}, initialSate);\nexport default users;","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/modules/users.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","usersAPI","takeLatest","LIST_USERS","LIST_USERS_SUCCESS","LIST_USERS_FAILURE","UPDATE_USERS","listUsers","updateUsers","listUsersSaga","updateUsersSaga","usersSaga","initialSate","users","error","state","payload"],"mappings":";;;;;;;AAAA;AACA;AAEA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;8BAKIF,wBAAwB,CAAC,kBAAD,C;;MAH1BG,U;MACAC,kB;MACAC,kB,8BAEF;;;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAGV,YAAY,CAACM,UAAD,CAA9B;AACP,OAAO,MAAMK,WAAW,GAAGX,YAAY,CAACS,YAAD,CAAhC,C,CAEP;;AAEA,MAAMG,aAAa,GAAGV,iBAAiB,CAACI,UAAD,EAAaF,QAAQ,CAACM,SAAtB,CAAvC;AACA,MAAMG,eAAe,GAAGX,iBAAiB,CAACO,YAAD,EAAeL,QAAQ,CAACO,WAAxB,CAAzC;AACA,OAAO,UAAUG,SAAV,GAAsB;AAC3B,QAAMT,UAAU,CAACC,UAAD,EAAaM,aAAb,CAAhB;AACA,QAAMP,UAAU,CAACI,YAAD,EAAeI,eAAf,CAAhB;AACD,C,CAED;;AACA,MAAME,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,IADW;AAElBC,EAAAA,KAAK,EAAE;AAFW,CAApB,C,CAKA;AACA;;AACA,MAAMD,KAAK,GAAGf,aAAa,CACzB;AACE,GAACM,kBAAD,GAAsB,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACjBE,KADiB;AAEpBF,IAAAA;AAFoB,IADxB;AAKE,GAACR,kBAAD,GAAsB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBACjBC,KADiB;AAEpBD,IAAAA;AAFoB,IALxB;AASE;AACA,GAACR,YAAD,GAAgB,CAACS,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACXE,KADW;AAEdF,IAAAA;AAFc;AAVlB,CADyB,EAgBzBD,WAhByB,CAA3B;AAmBA,eAAeC,KAAf","sourcesContent":["//리덕스에 사용될 액션 타입, 액션 생성함수, 리듀서 등을 정의.\r\n//user 정보를 얻거나 수정.\r\n\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as usersAPI from '../lib/api/users';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n//==============액션 타입 정의=============\r\nconst [\r\n  LIST_USERS,\r\n  LIST_USERS_SUCCESS,\r\n  LIST_USERS_FAILURE,\r\n] = createRequestActionTypes('users/LIST_USERS');\r\n//유저 정보를 변경하는 액션\r\nconst UPDATE_USERS = 'users/UPDATE_USERS';\r\n\r\n//==========액션 생성 함수===============\r\nexport const listUsers = createAction(LIST_USERS);\r\nexport const updateUsers = createAction(UPDATE_USERS);\r\n\r\n//=========리덕스 사가 생성==============\r\n\r\nconst listUsersSaga = createRequestSaga(LIST_USERS, usersAPI.listUsers);\r\nconst updateUsersSaga = createRequestSaga(UPDATE_USERS, usersAPI.updateUsers);\r\nexport function* usersSaga() {\r\n  yield takeLatest(LIST_USERS, listUsersSaga);\r\n  yield takeLatest(UPDATE_USERS, updateUsersSaga);\r\n}\r\n\r\n//=========initial state (초기 상태) 정의===========\r\nconst initialSate = {\r\n  users: null,\r\n  error: null,\r\n};\r\n\r\n//=========리듀서 정의============\r\n//************유저 상태를 변경하는 리듀서 필요.*******************\r\nconst users = handleActions(\r\n  {\r\n    [LIST_USERS_SUCCESS]: (state, { payload: users }) => ({\r\n      ...state,\r\n      users,\r\n    }),\r\n    [LIST_USERS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    //확인 필요\r\n    [UPDATE_USERS]: (state, { payload: users }) => ({\r\n      ...state,\r\n      users,\r\n    }),\r\n  },\r\n  initialSate,\r\n);\r\n\r\nexport default users;\r\n"]},"metadata":{},"sourceType":"module"}