{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\post\\\\PostViewerContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\nimport { setContestName, resetContestName } from '../../modules/contestName'; //react-router-dom을 사용해 라우트로 설정한 컴포넌트는 3가지의 props를 전달받음.\n//match: 어떤 라우트에 매칭되었는지에 대한 정보.\n//history: push, replace를 통해 다른 경로로 이동하거나 앞 뒤 페이지로 전환 가능.\n\nconst PostViewerContainer = ({\n  match,\n  history\n}) => {\n  const postId = match.params.postId;\n  const dispatch = useDispatch(); //post === state.post.post, error === state.post.error, ...\n\n  const _useSelector = useSelector(({\n    post,\n    loading,\n    user,\n    contestName\n  }) => ({\n    //state.post, state.loading, state.user\n    post: post.post,\n    error: post.error,\n    loading: loading['post/READ_POST'],\n    user: user.user,\n    contestName: contestName.contestName\n  })),\n        post = _useSelector.post,\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        user = _useSelector.user,\n        contestName = _useSelector.contestName; //대회 정보 로딩이 끝난 후, contestName 상태와 현재 포스트의 제목이 다른 경우 contestName 상태를 업데이트.\n\n\n  if (post && loading && contestName !== post.title) {\n    dispatch(setContestName(post.title));\n  }\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    return () => {\n      dispatch(unloadPost()); //write 페이지로 넘어가도 유지해야 하는데, 초기화 되어버림.\n      //dispatch(resetContestName());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/postlist');\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return React.createElement(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error,\n    user: user,\n    actionButtons: React.createElement(PostActionButtons, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(PostViewerContainer);","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\containers\\post\\PostViewerContainer.js"],"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","setOriginalPost","removePost","setContestName","resetContestName","PostViewerContainer","match","history","postId","params","dispatch","post","loading","user","contestName","error","title","onEdit","push","onRemove","e","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,2BAAjD,C,CAEA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAAA,QAC1CC,MAD0C,GAC/BF,KAAK,CAACG,MADyB,CAC1CD,MAD0C;AAElD,QAAME,QAAQ,GAAGhB,WAAW,EAA5B,CAFkD,CAGlD;;AAHkD,uBAIEC,WAAW,CAC7D,CAAC;AAAEgB,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,GAAD,MAA2C;AACzC;AACAH,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAF8B;AAGzCI,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KAH6B;AAIzCH,IAAAA,OAAO,EAAEA,OAAO,CAAC,gBAAD,CAJyB;AAKzCC,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAL8B;AAMzCC,IAAAA,WAAW,EAAEA,WAAW,CAACA;AANgB,GAA3C,CAD6D,CAJb;AAAA,QAI1CH,IAJ0C,gBAI1CA,IAJ0C;AAAA,QAIpCI,KAJoC,gBAIpCA,KAJoC;AAAA,QAI7BH,OAJ6B,gBAI7BA,OAJ6B;AAAA,QAIpBC,IAJoB,gBAIpBA,IAJoB;AAAA,QAIdC,WAJc,gBAIdA,WAJc,EAelD;;;AACA,MAAIH,IAAI,IAAIC,OAAR,IAAmBE,WAAW,KAAKH,IAAI,CAACK,KAA5C,EAAmD;AACjDN,IAAAA,QAAQ,CAACP,cAAc,CAACQ,IAAI,CAACK,KAAN,CAAf,CAAR;AACD;;AAEDvB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ,CAACb,QAAQ,CAACW,MAAD,CAAT,CAAR;AACA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACZ,UAAU,EAAX,CAAR,CADW,CAEX;AACA;AACD,KAJD;AAKD,GAPQ,EAON,CAACY,QAAD,EAAWF,MAAX,CAPM,CAAT;;AASA,QAAMS,MAAM,GAAG,MAAM;AACnBP,IAAAA,QAAQ,CAACT,eAAe,CAACU,IAAD,CAAhB,CAAR;AACAJ,IAAAA,OAAO,CAACW,IAAR,CAAa,QAAb;AACD,GAHD;;AAKA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMjB,UAAU,CAACM,MAAD,CAAhB;AACAD,MAAAA,OAAO,CAACW,IAAR,CAAa,WAAb;AACD,KAHD,CAGE,OAAOE,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAPD;;AASA,SACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAET,IADR;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEG,KAHT;AAIE,IAAA,IAAI,EAAEF,IAJR;AAKE,IAAA,aAAa,EAAE,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEI,MAA3B;AAAmC,MAAA,QAAQ,EAAEE,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CApDD;;AAsDA,eAAevB,UAAU,CAACS,mBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\nimport { setContestName, resetContestName } from '../../modules/contestName';\r\n\r\n//react-router-dom을 사용해 라우트로 설정한 컴포넌트는 3가지의 props를 전달받음.\r\n//match: 어떤 라우트에 매칭되었는지에 대한 정보.\r\n//history: push, replace를 통해 다른 경로로 이동하거나 앞 뒤 페이지로 전환 가능.\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  //post === state.post.post, error === state.post.error, ...\r\n  const { post, error, loading, user, contestName } = useSelector(\r\n    ({ post, loading, user, contestName }) => ({\r\n      //state.post, state.loading, state.user\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n      contestName: contestName.contestName,\r\n    }),\r\n  );\r\n\r\n  //대회 정보 로딩이 끝난 후, contestName 상태와 현재 포스트의 제목이 다른 경우 contestName 상태를 업데이트.\r\n  if (post && loading && contestName !== post.title) {\r\n    dispatch(setContestName(post.title));\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    return () => {\r\n      dispatch(unloadPost());\r\n      //write 페이지로 넘어가도 유지해야 하는데, 초기화 되어버림.\r\n      //dispatch(resetContestName());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/postlist');\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      user={user}\r\n      actionButtons={<PostActionButtons onEdit={onEdit} onRemove={onRemove} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n"]},"metadata":{},"sourceType":"module"}