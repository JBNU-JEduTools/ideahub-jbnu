{"ast":null,"code":"/* @flow */\n\n/*::\r\n\r\ntype DotenvParseOptions = {\r\n  debug?: boolean\r\n}\r\n\r\n// keys and values from src\r\ntype DotenvParseOutput = { [string]: string }\r\n\r\ntype DotenvConfigOptions = {\r\n  path?: string, // path to .env file\r\n  encoding?: string, // encoding of .env file\r\n  debug?: string // turn on logging for debugging purposes\r\n}\r\n\r\ntype DotenvConfigOutput = {\r\n  parsed?: DotenvParseOutput,\r\n  error?: Error\r\n}\r\n\r\n*/\nconst fs = require('fs');\n\nconst path = require('path');\n\nfunction log(message\n/*: string */\n) {\n  console.log(\"[dotenv][DEBUG] \".concat(message));\n} // Parses src into an Object\n\n\nfunction parse(src\n/*: string | Buffer */\n, options\n/*: ?DotenvParseOptions */\n)\n/*: DotenvParseOutput */\n{\n  const debug = Boolean(options && options.debug);\n  const obj = {}; // convert Buffers before splitting into lines and processing\n\n  src.toString().split('\\n').forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/); // matched?\n\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      let value = keyValueArr[2] || ''; // expand newlines in quoted values\n\n      const len = value ? value.length : 0;\n\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n');\n      } // remove any surrounding quotes and extra spaces\n\n\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim();\n      obj[key] = value;\n    } else if (debug) {\n      log(\"did not match key and value when parsing line \".concat(idx + 1, \": \").concat(line));\n    }\n  });\n  return obj;\n} // Populates process.env from .env file\n\n\nfunction config(options\n/*: ?DotenvConfigOptions */\n)\n/*: DotenvConfigOutput */\n{\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding\n  /*: string */\n  = 'utf8';\n  let debug = false;\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path;\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n\n    if (options.debug != null) {\n      debug = true;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key];\n      } else if (debug) {\n        log(\"\\\"\".concat(key, \"\\\" is already defined in `process.env` and will not be overwritten\"));\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\n\nmodule.exports.config = config;\nmodule.exports.load = config;\nmodule.exports.parse = parse;","map":null,"metadata":{},"sourceType":"script"}