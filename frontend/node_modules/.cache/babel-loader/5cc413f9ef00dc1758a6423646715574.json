{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\post\\\\PostViewerContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({\n  match,\n  history\n}) => {\n  const postId = match.params.postId;\n  const dispatch = useDispatch(); //post === state.post.post, error === state.post.error, ...\n\n  const _useSelector = useSelector(({\n    post,\n    loading,\n    user\n  }) => ({\n    //state.post, state.loading, state.user\n    post: post.post,\n    error: post.error,\n    loading: loading['post/READ_POST'],\n    user: user.user\n  })),\n        post = _useSelector.post,\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        user = _useSelector.user;\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/postlist');\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return React.createElement(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error,\n    user: user,\n    actionButtons: React.createElement(PostActionButtons, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(PostViewerContainer);","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/containers/post/PostViewerContainer.js"],"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","setOriginalPost","removePost","PostViewerContainer","match","history","postId","params","dispatch","post","loading","user","error","onEdit","push","onRemove","e","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAAA,QAC1CC,MAD0C,GAC/BF,KAAK,CAACG,MADyB,CAC1CD,MAD0C;AAElD,QAAME,QAAQ,GAAGd,WAAW,EAA5B,CAFkD,CAGlD;;AAHkD,uBAIXC,WAAW,CAChD,CAAC;AAAEc,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,MAA8B;AAC5B;AACAF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAFiB;AAG5BG,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAHgB;AAI5BF,IAAAA,OAAO,EAAEA,OAAO,CAAC,gBAAD,CAJY;AAK5BC,IAAAA,IAAI,EAAEA,IAAI,CAACA;AALiB,GAA9B,CADgD,CAJA;AAAA,QAI1CF,IAJ0C,gBAI1CA,IAJ0C;AAAA,QAIpCG,KAJoC,gBAIpCA,KAJoC;AAAA,QAI7BF,OAJ6B,gBAI7BA,OAJ6B;AAAA,QAIpBC,IAJoB,gBAIpBA,IAJoB;;AAclDlB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACX,QAAQ,CAACS,MAAD,CAAT,CAAR;AACA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACV,UAAU,EAAX,CAAR;AACD,KAFD;AAGD,GALQ,EAKN,CAACU,QAAD,EAAWF,MAAX,CALM,CAAT;;AAOA,QAAMO,MAAM,GAAG,MAAM;AACnBL,IAAAA,QAAQ,CAACP,eAAe,CAACQ,IAAD,CAAhB,CAAR;AACAJ,IAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACD,GAHD;;AAKA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMb,UAAU,CAACI,MAAD,CAAhB;AACAD,MAAAA,OAAO,CAACS,IAAR,CAAa,WAAb;AACD,KAHD,CAGE,OAAOE,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAPD;;AASA,SACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEP,IADR;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEE,KAHT;AAIE,IAAA,IAAI,EAAED,IAJR;AAKE,IAAA,aAAa,EAAE,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEE,MAA3B;AAAmC,MAAA,QAAQ,EAAEE,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CA5CD;;AA8CA,eAAenB,UAAU,CAACO,mBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  //post === state.post.post, error === state.post.error, ...\r\n  const { post, error, loading, user } = useSelector(\r\n    ({ post, loading, user }) => ({\r\n      //state.post, state.loading, state.user\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/postlist');\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      user={user}\r\n      actionButtons={<PostActionButtons onEdit={onEdit} onRemove={onRemove} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n"]},"metadata":{},"sourceType":"module"}