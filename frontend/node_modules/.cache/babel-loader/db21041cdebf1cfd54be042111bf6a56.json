{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects'; //액션 타입 정의\n\nconst ADD_COMMENT = 'writeComment/ADD_COMMENT'; //액션 생성 함수\n\nexport const addComment = createAction(ADD_COMMENT); //사가 생성\n//initial state\n\nconst initialState = {\n  title: '',\n  body: '',\n  taggedContest: '',\n  videoURL: '',\n  team: '',\n  status: '',\n  stars: 0,\n  publishDate: null,\n  comments: []\n}; //첫 파라미터: 액션에 따라 실행 할 함수들을 가지고 있는 객체\n//두번째 파라미터: initialState\n\nconst writeComments = handleActions({\n  /*\r\n  [INCREMENT]: (state, action) => ({\r\n  counter: state.counter + action.payload\r\n  }),\r\n  과 같이 사용\r\n  */\n  //현재 content 객체를 상태로 받아서, comments만 수정하도록 하고싶음.\n  //reducer : 액션 타입에 따라 액션을 수행하고, 상태를 리턴.\n  [ADD_COMMENT]: (state, action) => _objectSpread({}, state, {\n    comments: [...state.comments, action.payload.comments]\n  })\n}, initialstate);\nexport default writeComments;","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/modules/writeComment.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","ADD_COMMENT","addComment","initialState","title","body","taggedContest","videoURL","team","status","stars","publishDate","comments","writeComments","state","action","payload","initialstate"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,0BAApB,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAGP,YAAY,CAACM,WAAD,CAA/B,C,CAEP;AAEA;;AACA,MAAME,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,aAAa,EAAE,EAHI;AAInBC,EAAAA,QAAQ,EAAE,EAJS;AAKnBC,EAAAA,IAAI,EAAE,EALa;AAMnBC,EAAAA,MAAM,EAAE,EANW;AAOnBC,EAAAA,KAAK,EAAE,CAPY;AAQnBC,EAAAA,WAAW,EAAE,IARM;AASnBC,EAAAA,QAAQ,EAAE;AATS,CAArB,C,CAYA;AACA;;AACA,MAAMC,aAAa,GAAGjB,aAAa,CACjC;AACE;;;;;;AAOA;AACA;AACA,GAACK,WAAD,GAAe,CAACa,KAAD,EAAQC,MAAR,uBACVD,KADU;AAEbF,IAAAA,QAAQ,EAAE,CAAC,GAAGE,KAAK,CAACF,QAAV,EAAoBG,MAAM,CAACC,OAAP,CAAeJ,QAAnC;AAFG;AAVjB,CADiC,EAgBjCK,YAhBiC,CAAnC;AAmBA,eAAeJ,aAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n//액션 타입 정의\r\nconst ADD_COMMENT = 'writeComment/ADD_COMMENT';\r\n\r\n//액션 생성 함수\r\nexport const addComment = createAction(ADD_COMMENT);\r\n\r\n//사가 생성\r\n\r\n//initial state\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  taggedContest: '',\r\n  videoURL: '',\r\n  team: '',\r\n  status: '',\r\n  stars: 0,\r\n  publishDate: null,\r\n  comments: [],\r\n};\r\n\r\n//첫 파라미터: 액션에 따라 실행 할 함수들을 가지고 있는 객체\r\n//두번째 파라미터: initialState\r\nconst writeComments = handleActions(\r\n  {\r\n    /*\r\n    [INCREMENT]: (state, action) => ({\r\n    counter: state.counter + action.payload\r\n    }),\r\n    과 같이 사용\r\n    */\r\n\r\n    //현재 content 객체를 상태로 받아서, comments만 수정하도록 하고싶음.\r\n    //reducer : 액션 타입에 따라 액션을 수행하고, 상태를 리턴.\r\n    [ADD_COMMENT]: (state, action) => ({\r\n      ...state,\r\n      comments: [...state.comments, action.payload.comments],\r\n    }),\r\n  },\r\n  initialstate,\r\n);\r\n\r\nexport default writeComments;\r\n"]},"metadata":{},"sourceType":"module"}