{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\contentWrite\\\\ContentEditorContainer.js\";\nimport React, { useEffect, useCallback } from 'react';\nimport ContentEditor from '../../components/contentWrite/ContentEditor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize, setInitialState } from '../../modules/contentWrite';\n\nconst ContentEditorContainer = () => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    contentWrite,\n    contestName,\n    content\n  }) => ({\n    title: contentWrite.title,\n    body: contentWrite.body,\n    taggedContest: contentWrite.taggedContest,\n    videoURL: contentWrite.videoURL,\n    team: contentWrite.team,\n    status: contentWrite.status,\n    contestName: contestName.contestName,\n    originalContentId: content.content.originalContentId\n  })),\n        title = _useSelector.title,\n        body = _useSelector.body,\n        status = _useSelector.status,\n        videoURL = _useSelector.videoURL,\n        team = _useSelector.team,\n        taggedContest = _useSelector.taggedContest,\n        contestName = _useSelector.contestName,\n        originalContentId = _useSelector.originalContentId;\n\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\n  useEffect(() => {\n    //☆★☆★☆★☆★☆★수정 시에도 작동함..\n    if (!originalContentId) {\n      dispatch(setInitialState(contestName));\n    }\n\n    return () => {\n      //unmount시 contentWrite와 관련된 상태를 초기화 하는데 사용\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n  return React.createElement(ContentEditor, {\n    onChangeField: onChangeField,\n    title: title,\n    body: body,\n    taggedContest: contestName,\n    videoURL: videoURL,\n    team: team,\n    status: status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n};\n\nexport default ContentEditorContainer;","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/containers/contentWrite/ContentEditorContainer.js"],"names":["React","useEffect","useCallback","ContentEditor","useSelector","useDispatch","changeField","initialize","setInitialState","ContentEditorContainer","dispatch","contentWrite","contestName","content","title","body","taggedContest","videoURL","team","status","originalContentId","onChangeField","payload"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,eAHF,QAIO,4BAJP;;AAMA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AADmC,uBAW/BD,WAAW,CAAC,CAAC;AAAEO,IAAAA,YAAF;AAAgBC,IAAAA,WAAhB;AAA6BC,IAAAA;AAA7B,GAAD,MAA6C;AAC3DC,IAAAA,KAAK,EAAEH,YAAY,CAACG,KADuC;AAE3DC,IAAAA,IAAI,EAAEJ,YAAY,CAACI,IAFwC;AAG3DC,IAAAA,aAAa,EAAEL,YAAY,CAACK,aAH+B;AAI3DC,IAAAA,QAAQ,EAAEN,YAAY,CAACM,QAJoC;AAK3DC,IAAAA,IAAI,EAAEP,YAAY,CAACO,IALwC;AAM3DC,IAAAA,MAAM,EAAER,YAAY,CAACQ,MANsC;AAO3DP,IAAAA,WAAW,EAAEA,WAAW,CAACA,WAPkC;AAQ3DQ,IAAAA,iBAAiB,EAAEP,OAAO,CAACA,OAAR,CAAgBO;AARwB,GAA7C,CAAD,CAXoB;AAAA,QAGjCN,KAHiC,gBAGjCA,KAHiC;AAAA,QAIjCC,IAJiC,gBAIjCA,IAJiC;AAAA,QAKjCI,MALiC,gBAKjCA,MALiC;AAAA,QAMjCF,QANiC,gBAMjCA,QANiC;AAAA,QAOjCC,IAPiC,gBAOjCA,IAPiC;AAAA,QAQjCF,aARiC,gBAQjCA,aARiC;AAAA,QASjCJ,WATiC,gBASjCA,WATiC;AAAA,QAUjCQ,iBAViC,gBAUjCA,iBAViC;;AAqBnC,QAAMC,aAAa,GAAGnB,WAAW,CAACoB,OAAO,IAAIZ,QAAQ,CAACJ,WAAW,CAACgB,OAAD,CAAZ,CAApB,EAA4C,CAC3EZ,QAD2E,CAA5C,CAAjC;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACmB,iBAAL,EAAwB;AACtBV,MAAAA,QAAQ,CAACF,eAAe,CAACI,WAAD,CAAhB,CAAR;AACD;;AACD,WAAO,MAAM;AACX;AACAF,MAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACD,KAHD;AAID,GATQ,EASN,CAACG,QAAD,CATM,CAAT;AAUA,SACE,oBAAC,aAAD;AACE,IAAA,aAAa,EAAEW,aADjB;AAEE,IAAA,KAAK,EAAEP,KAFT;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,aAAa,EAAEH,WAJjB;AAKE,IAAA,QAAQ,EAAEK,QALZ;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,MAAM,EAAEC,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CA9CD;;AAgDA,eAAeV,sBAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport ContentEditor from '../../components/contentWrite/ContentEditor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  changeField,\r\n  initialize,\r\n  setInitialState,\r\n} from '../../modules/contentWrite';\r\n\r\nconst ContentEditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    title,\r\n    body,\r\n    status,\r\n    videoURL,\r\n    team,\r\n    taggedContest,\r\n    contestName,\r\n    originalContentId,\r\n  } = useSelector(({ contentWrite, contestName, content }) => ({\r\n    title: contentWrite.title,\r\n    body: contentWrite.body,\r\n    taggedContest: contentWrite.taggedContest,\r\n    videoURL: contentWrite.videoURL,\r\n    team: contentWrite.team,\r\n    status: contentWrite.status,\r\n    contestName: contestName.contestName,\r\n    originalContentId: content.content.originalContentId,\r\n  }));\r\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\r\n    dispatch,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    //☆★☆★☆★☆★☆★수정 시에도 작동함..\r\n    if (!originalContentId) {\r\n      dispatch(setInitialState(contestName));\r\n    }\r\n    return () => {\r\n      //unmount시 contentWrite와 관련된 상태를 초기화 하는데 사용\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n  return (\r\n    <ContentEditor\r\n      onChangeField={onChangeField}\r\n      title={title}\r\n      body={body}\r\n      taggedContest={contestName}\r\n      videoURL={videoURL}\r\n      team={team}\r\n      status={status}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContentEditorContainer;\r\n"]},"metadata":{},"sourceType":"module"}