{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\kirin\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\kirin\\\\Desktop\\\\cmanager\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects'; //action type\n\nconst INITIALIZE = 'write/INITIALIZE'; //모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key값 바꾸기\n\nconst _createRequestActionT = createRequestActionTypes('write/WRITE_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      WRITE_POST = _createRequestActionT2[0],\n      WRITE_POST_SUCCESS = _createRequestActionT2[1],\n      WRITE_POST_FAILURE = _createRequestActionT2[2]; //action creating functions\n\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  category,\n  status,\n  date,\n  place,\n  description\n}) => ({\n  title,\n  category,\n  status,\n  date,\n  place,\n  description\n})); //create saga\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n} //initial state\n\nconst initialState = {\n  title: '',\n  category: '',\n  status: '',\n  date: '',\n  place: '',\n  description: '',\n  post: null,\n  postError: null\n}; //reducer\n\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value\n  }),\n  [WRITE_POST]: state => _objectSpread({}, state, {\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [WRITE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => _objectSpread({}, state, {\n    postError\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["C:\\Users\\kirin\\Desktop\\cmanager\\frontend\\src\\modules\\write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","initialize","changeField","key","value","writePost","title","category","status","date","place","description","writePostSaga","writeSaga","initialState","post","postError","write","state","payload"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;AACA,MAAMC,UAAU,GAAG,kBAAnB,C,CAAuC;;AACvC,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;8BAKvCJ,wBAAwB,CAAC,kBAAD,C;;MAH1BK,U;MACAC,kB;MACAC,kB,8BAGF;;;AACA,OAAO,MAAMC,UAAU,GAAGX,YAAY,CAACM,UAAD,CAA/B;AACP,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAD,EAAe,CAAC;AAAEM,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,MAAqB;AACzED,EAAAA,GADyE;AAEzEC,EAAAA;AAFyE,CAArB,CAAf,CAAhC;AAIP,OAAO,MAAMC,SAAS,GAAGf,YAAY,CACnCQ,UADmC,EAEnC,CAAC;AAAEQ,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,MAAnB;AAA2BC,EAAAA,IAA3B;AAAiCC,EAAAA,KAAjC;AAAwCC,EAAAA;AAAxC,CAAD,MAA4D;AAC1DL,EAAAA,KAD0D;AAE1DC,EAAAA,QAF0D;AAG1DC,EAAAA,MAH0D;AAI1DC,EAAAA,IAJ0D;AAK1DC,EAAAA,KAL0D;AAM1DC,EAAAA;AAN0D,CAA5D,CAFmC,CAA9B,C,CAYP;;AACA,MAAMC,aAAa,GAAGpB,iBAAiB,CAACM,UAAD,EAAaJ,QAAQ,CAACW,SAAtB,CAAvC;AACA,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAMlB,UAAU,CAACG,UAAD,EAAac,aAAb,CAAhB;AACD,C,CAED;;AACA,MAAME,YAAY,GAAG;AACnBR,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,MAAM,EAAE,EAHW;AAInBC,EAAAA,IAAI,EAAE,EAJa;AAKnBC,EAAAA,KAAK,EAAE,EALY;AAMnBC,EAAAA,WAAW,EAAE,EANM;AAOnBI,EAAAA,IAAI,EAAE,IAPa;AAQnBC,EAAAA,SAAS,EAAE;AARQ,CAArB,C,CAWA;;AACA,MAAMC,KAAK,GAAG1B,aAAa,CACzB;AACE,GAACK,UAAD,GAAcsB,KAAK,IAAIJ,YADzB;AAEE,GAACjB,YAAD,GAAgB,CAACqB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAE;AAAEhB,MAAAA,GAAF;AAAOC,MAAAA;AAAP;AAAX,GAAR,uBACXc,KADW;AAEd,KAACf,GAAD,GAAOC;AAFO,IAFlB;AAME,GAACN,UAAD,GAAcoB,KAAK,sBACdA,KADc;AAEjBH,IAAAA,IAAI,EAAE,IAFW;AAGjBC,IAAAA,SAAS,EAAE;AAHM,IANrB;AAWE,GAACjB,kBAAD,GAAsB,CAACmB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,uBACjBG,KADiB;AAEpBH,IAAAA;AAFoB,IAXxB;AAeE,GAACf,kBAAD,GAAsB,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACjBE,KADiB;AAEpBF,IAAAA;AAFoB;AAfxB,CADyB,EAqBzBF,YArByB,CAA3B;AAwBA,eAAeG,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n//action type\r\nconst INITIALIZE = 'write/INITIALIZE'; //모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST');\r\n\r\n//action creating functions\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(\r\n  WRITE_POST,\r\n  ({ title, category, status, date, place, description }) => ({\r\n    title,\r\n    category,\r\n    status,\r\n    date,\r\n    place,\r\n    description,\r\n  }),\r\n);\r\n\r\n//create saga\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n}\r\n\r\n//initial state\r\nconst initialState = {\r\n  title: '',\r\n  category: '',\r\n  status: '',\r\n  date: '',\r\n  place: '',\r\n  description: '',\r\n  post: null,\r\n  postError: null,\r\n};\r\n\r\n//reducer\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState,\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value,\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n"]},"metadata":{},"sourceType":"module"}