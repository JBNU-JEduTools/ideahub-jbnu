{"ast":null,"code":"import _defineProperty from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst _createRequestActionT = createRequestActionTypes('posts/LIST_POSTS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_POSTS = _createRequestActionT2[0],\n      LIST_POSTS_SUCCESS = _createRequestActionT2[1],\n      LIST_POSTS_FAILURE = _createRequestActionT2[2];\n\nconst _createRequestActionT3 = createRequestActionTypes('posts/LIST_RECOMMENDED_POSTS'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      LIST_RECOMMENDED_POSTS = _createRequestActionT4[0],\n      LIST_RECOMMENDED_POSTS_SUCCESS = _createRequestActionT4[1],\n      LIST_RECOMMENDED_POSTS_FAILURE = _createRequestActionT4[2];\n\nexport const listPosts = createAction(LIST_POSTS, ({\n  tag,\n  username,\n  page\n}) => ({\n  tag,\n  username,\n  page\n}));\nexport const listRecommendedPosts = createAction(LIST_RECOMMENDED_POSTS);\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nconst listRecommendedPostsSaga = createRequestSaga(LIST_RECOMMENDED_POSTS, postsAPI.listRecommendedPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n  yield takeLatest(LIST_RECOMMENDED_POSTS, listRecommendedPostsSaga);\n}\nconst initialState = {\n  posts: null,\n  recommendedPosts: null,\n  error: null,\n  lastPage: 1\n};\nconst posts = handleActions({\n  [LIST_POSTS_SUCCESS]: (state, {\n    payload: posts,\n    meta: response\n  }) => _objectSpread({}, state, {\n    posts,\n    lastPage: parseInt(response.headers['last-page'], 5)\n  }),\n  [LIST_POSTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  [LIST_RECOMMENDED_POSTS_SUCCESS]: (state, {\n    payload: recommendedPosts\n  }) => _objectSpread({}, state, {\n    recommendedPosts\n  }),\n  [LIST_RECOMMENDED_POSTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  })\n}, initialState);\nexport default posts;","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/modules/posts.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","LIST_RECOMMENDED_POSTS","LIST_RECOMMENDED_POSTS_SUCCESS","LIST_RECOMMENDED_POSTS_FAILURE","listPosts","tag","username","page","listRecommendedPosts","listPostsSaga","listRecommendedPostsSaga","postsSaga","initialState","posts","recommendedPosts","error","lastPage","state","payload","meta","response","parseInt","headers"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;8BAMIF,wBAAwB,CAAC,kBAAD,C;;MAH1BG,U;MACAC,kB;MACAC,kB;;+BAMEL,wBAAwB,CAAC,8BAAD,C;;MAH1BM,sB;MACAC,8B;MACAC,8B;;AAGF,OAAO,MAAMC,SAAS,GAAGZ,YAAY,CACnCM,UADmC,EAEnC,CAAC;AAAEO,EAAAA,GAAF;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA;AAAjB,CAAD,MAA8B;AAC5BF,EAAAA,GAD4B;AAE5BC,EAAAA,QAF4B;AAG5BC,EAAAA;AAH4B,CAA9B,CAFmC,CAA9B;AAQP,OAAO,MAAMC,oBAAoB,GAAGhB,YAAY,CAACS,sBAAD,CAAzC;AAEP,MAAMQ,aAAa,GAAGf,iBAAiB,CAACI,UAAD,EAAaF,QAAQ,CAACQ,SAAtB,CAAvC;AACA,MAAMM,wBAAwB,GAAGhB,iBAAiB,CAChDO,sBADgD,EAEhDL,QAAQ,CAACY,oBAFuC,CAAlD;AAKA,OAAO,UAAUG,SAAV,GAAsB;AAC3B,QAAMd,UAAU,CAACC,UAAD,EAAaW,aAAb,CAAhB;AACA,QAAMZ,UAAU,CAACI,sBAAD,EAAyBS,wBAAzB,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,gBAAgB,EAAE,IAFC;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;AAOA,MAAMH,KAAK,GAAGpB,aAAa,CACzB;AACE,GAACM,kBAAD,GAAsB,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEL,KAAX;AAAkBM,IAAAA,IAAI,EAAEC;AAAxB,GAAR,uBACjBH,KADiB;AAEpBJ,IAAAA,KAFoB;AAGpBG,IAAAA,QAAQ,EAAEK,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,WAAjB,CAAD,EAAgC,CAAhC;AAHE,IADxB;AAME,GAACtB,kBAAD,GAAsB,CAACiB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACjBE,KADiB;AAEpBF,IAAAA;AAFoB,IANxB;AAUE,GAACb,8BAAD,GAAkC,CAChCe,KADgC,EAEhC;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAFgC,uBAI7BG,KAJ6B;AAKhCH,IAAAA;AALgC,IAVpC;AAiBE,GAACX,8BAAD,GAAkC,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBAC7BE,KAD6B;AAEhCF,IAAAA;AAFgC;AAjBpC,CADyB,EAuBzBH,YAvByB,CAA3B;AA0BA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_POSTS');\nconst [\n  LIST_RECOMMENDED_POSTS,\n  LIST_RECOMMENDED_POSTS_SUCCESS,\n  LIST_RECOMMENDED_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_RECOMMENDED_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tag, username, page }) => ({\n    tag,\n    username,\n    page,\n  }),\n);\nexport const listRecommendedPosts = createAction(LIST_RECOMMENDED_POSTS);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nconst listRecommendedPostsSaga = createRequestSaga(\n  LIST_RECOMMENDED_POSTS,\n  postsAPI.listRecommendedPosts,\n);\n\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n  yield takeLatest(LIST_RECOMMENDED_POSTS, listRecommendedPostsSaga);\n}\n\nconst initialState = {\n  posts: null,\n  recommendedPosts: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 5),\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [LIST_RECOMMENDED_POSTS_SUCCESS]: (\n      state,\n      { payload: recommendedPosts },\n    ) => ({\n      ...state,\n      recommendedPosts,\n    }),\n    [LIST_RECOMMENDED_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default posts;\n"]},"metadata":{},"sourceType":"module"}