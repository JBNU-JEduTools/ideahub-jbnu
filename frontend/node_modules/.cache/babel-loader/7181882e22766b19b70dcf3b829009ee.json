{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n/*\r\n  READ_POST = 'post/READ_POST';\r\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\r\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\r\n*/\n\nconst _createRequestActionT = createRequestActionTypes('post/READ_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      READ_POST = _createRequestActionT2[0],\n      READ_POST_SUCCESS = _createRequestActionT2[1],\n      READ_POST_FAILURE = _createRequestActionT2[2];\n\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n} //initial state\n\nconst initialState = {\n  post: null,\n  error: null\n}; //reducer\n\nconst post = handleActions({\n  //actionType: (state, action) => newState\n  [READ_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [READ_POST_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  //flushes data, leaving post page.\n  [UNLOAD_POST]: () => initialState\n}, initialState);\nexport default post;","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\modules\\post.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","id","unloadPost","readPostSaga","postSaga","initialState","post","error","state","payload"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA;;;;;;8BASIF,wBAAwB,CAAC,gBAAD,C;;MAH1BG,S;MACAC,iB;MACAC,iB;;AAEF,MAAMC,WAAW,GAAG,kBAApB,C,CAAwC;;AAExC,OAAO,MAAMC,QAAQ,GAAGV,YAAY,CAACM,SAAD,EAAYK,EAAE,IAAIA,EAAlB,CAA7B;AACP,OAAO,MAAMC,UAAU,GAAGZ,YAAY,CAACS,WAAD,CAA/B;AAEP,MAAMI,YAAY,GAAGX,iBAAiB,CAACI,SAAD,EAAYF,QAAQ,CAACM,QAArB,CAAtC;AACA,OAAO,UAAUI,QAAV,GAAqB;AAC1B,QAAMT,UAAU,CAACC,SAAD,EAAYO,YAAZ,CAAhB;AACD,C,CACD;;AACA,MAAME,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB,C,CAIA;;AACA,MAAMD,IAAI,GAAGf,aAAa,CACxB;AACE;AACA,GAACM,iBAAD,GAAqB,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBAChBE,KADgB;AAEnBF,IAAAA;AAFmB,IAFvB;AAME,GAACR,iBAAD,GAAqB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBAChBC,KADgB;AAEnBD,IAAAA;AAFmB,IANvB;AAUE;AACA,GAACR,WAAD,GAAe,MAAMM;AAXvB,CADwB,EAcxBA,YAdwB,CAA1B;AAiBA,eAAeC,IAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n/*\r\n  READ_POST = 'post/READ_POST';\r\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\r\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\r\n*/\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\r\n\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n//initial state\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n};\r\n//reducer\r\nconst post = handleActions(\r\n  {\r\n    //actionType: (state, action) => newState\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    //flushes data, leaving post page.\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n"]},"metadata":{},"sourceType":"module"}