{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\contentWrite\\\\ContentEditorContainer.js\";\nimport React, { useEffect, useCallback } from 'react';\nimport ContentEditor from '../../components/contentWrite/ContentEditor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize } from '../../modules/contentWrite';\n\nconst ContentEditorContainer = () => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    contentWrite,\n    contestName\n  }) => ({\n    title: contentWrite.title,\n    body: contentWrite.body,\n    taggedContest: contentWrite.taggedContest,\n    videoURL: contentWrite.videoURL,\n    team: contentWrite.team,\n    status: contentWrite.status,\n    contestName: contestName.contestName\n  })),\n        title = _useSelector.title,\n        body = _useSelector.body,\n        status = _useSelector.status,\n        videoURL = _useSelector.videoURL,\n        team = _useSelector.team,\n        taggedContest = _useSelector.taggedContest,\n        contestName = _useSelector.contestName;\n\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [dispatch]); //unmount시 contentWrite와 관련된 상태를 초기화 하는데 사용\n\n  useEffect(() => {\n    return () => {\n      dispatch(initialize({\n        contestName: contestName\n      }));\n    };\n  }, [dispatch]);\n  return React.createElement(ContentEditor, {\n    onChangeField: onChangeField,\n    title: title,\n    body: body,\n    taggedContest: contestName,\n    videoURL: videoURL,\n    team: team,\n    status: status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  });\n};\n\nexport default ContentEditorContainer;","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/containers/contentWrite/ContentEditorContainer.js"],"names":["React","useEffect","useCallback","ContentEditor","useSelector","useDispatch","changeField","initialize","ContentEditorContainer","dispatch","contentWrite","contestName","title","body","taggedContest","videoURL","team","status","onChangeField","payload"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,4BAAxC;;AAEA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;;AADmC,uBAU/BD,WAAW,CAAC,CAAC;AAAEM,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,MAAoC;AAClDC,IAAAA,KAAK,EAAEF,YAAY,CAACE,KAD8B;AAElDC,IAAAA,IAAI,EAAEH,YAAY,CAACG,IAF+B;AAGlDC,IAAAA,aAAa,EAAEJ,YAAY,CAACI,aAHsB;AAIlDC,IAAAA,QAAQ,EAAEL,YAAY,CAACK,QAJ2B;AAKlDC,IAAAA,IAAI,EAAEN,YAAY,CAACM,IAL+B;AAMlDC,IAAAA,MAAM,EAAEP,YAAY,CAACO,MAN6B;AAOlDN,IAAAA,WAAW,EAAEA,WAAW,CAACA;AAPyB,GAApC,CAAD,CAVoB;AAAA,QAGjCC,KAHiC,gBAGjCA,KAHiC;AAAA,QAIjCC,IAJiC,gBAIjCA,IAJiC;AAAA,QAKjCI,MALiC,gBAKjCA,MALiC;AAAA,QAMjCF,QANiC,gBAMjCA,QANiC;AAAA,QAOjCC,IAPiC,gBAOjCA,IAPiC;AAAA,QAQjCF,aARiC,gBAQjCA,aARiC;AAAA,QASjCH,WATiC,gBASjCA,WATiC;;AAmBnC,QAAMO,aAAa,GAAGhB,WAAW,CAACiB,OAAO,IAAIV,QAAQ,CAACH,WAAW,CAACa,OAAD,CAAZ,CAApB,EAA4C,CAC3EV,QAD2E,CAA5C,CAAjC,CAnBmC,CAsBnC;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXQ,MAAAA,QAAQ,CAACF,UAAU,CAAC;AAAEI,QAAAA,WAAW,EAAEA;AAAf,OAAD,CAAX,CAAR;AACD,KAFD;AAGD,GAJQ,EAIN,CAACF,QAAD,CAJM,CAAT;AAKA,SACE,oBAAC,aAAD;AACE,IAAA,aAAa,EAAES,aADjB;AAEE,IAAA,KAAK,EAAEN,KAFT;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,aAAa,EAAEF,WAJjB;AAKE,IAAA,QAAQ,EAAEI,QALZ;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,MAAM,EAAEC,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CAvCD;;AAyCA,eAAeT,sBAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport ContentEditor from '../../components/contentWrite/ContentEditor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/contentWrite';\r\n\r\nconst ContentEditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    title,\r\n    body,\r\n    status,\r\n    videoURL,\r\n    team,\r\n    taggedContest,\r\n    contestName,\r\n  } = useSelector(({ contentWrite, contestName }) => ({\r\n    title: contentWrite.title,\r\n    body: contentWrite.body,\r\n    taggedContest: contentWrite.taggedContest,\r\n    videoURL: contentWrite.videoURL,\r\n    team: contentWrite.team,\r\n    status: contentWrite.status,\r\n    contestName: contestName.contestName,\r\n  }));\r\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\r\n    dispatch,\r\n  ]);\r\n  //unmount시 contentWrite와 관련된 상태를 초기화 하는데 사용\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize({ contestName: contestName }));\r\n    };\r\n  }, [dispatch]);\r\n  return (\r\n    <ContentEditor\r\n      onChangeField={onChangeField}\r\n      title={title}\r\n      body={body}\r\n      taggedContest={contestName}\r\n      videoURL={videoURL}\r\n      team={team}\r\n      status={status}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContentEditorContainer;\r\n"]},"metadata":{},"sourceType":"module"}