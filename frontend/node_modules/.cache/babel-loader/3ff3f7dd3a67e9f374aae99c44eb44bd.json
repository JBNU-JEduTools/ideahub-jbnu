{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\post\\\\NoPrizedAlerterContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport NoPrizedAlerter from '../../components/post/NoPrizedAlerter';\nimport { listContentItem } from '../../modules/post'; //react-router-dom을 사용해 라우트로 설정한 컴포넌트는 3가지의 props를 전달받음.\n//match: 어떤 라우트에 매칭되었는지에 대한 정보.\n//history: push, replace를 통해 다른 경로로 이동하거나 앞 뒤 페이지로 전환 가능.\n\nconst NoPrizedAlerterContainer = ({\n  match,\n  history,\n  location\n}) => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    post,\n    contentsList,\n    loading\n  }) => ({\n    post: post.post,\n    listError: post.listError,\n    loading: loading['post/LIST_CONTENT_ITEM'],\n    contentsList: post.contentsList\n  })),\n        post = _useSelector.post,\n        contentsList = _useSelector.contentsList,\n        listError = _useSelector.listError,\n        loading = _useSelector.loading;\n\n  let copyOfContentsList = JSON.parse(JSON.stringify(contentsList));\n  console.log(copyOfContentsList);\n\n  while (true) {\n    //copyOfContentsList의 각 요소의 taggedContest가 현재 대회의 title과 같지 않다면, 그 요소를 배열에서 삭제함.\n    const itemToFind = copyOfContentsList.find(item => item.taggedContest !== post.title);\n    const indexToRemove = copyOfContentsList.indexOf(itemToFind); //삭제할 요소를 찾았다면 삭제 후 루프.\n\n    if (indexToRemove > -1) {\n      copyOfContentsList.splice(indexToRemove, 1);\n      console.log(copyOfContentsList);\n    } //찾지 못했다면, copyOfContentsList에 속한 모든 요소가 현재 대회에 속한 작품이라는 뜻이므로, 그대로 상태에 전달.\n    else break;\n  }\n\n  useEffect(() => {\n    console.log(post);\n    console.log(contentsList);\n    console.log(copyOfContentsList);\n    dispatch(listContentItem({\n      copyOfContentsList\n    }));\n  }, [dispatch]); //수상 작품 등록 및 저장.\n\n  const onPrizeSave = () => {//☆★☆★☆★☆★☆★수정 필요!!!☆★☆★☆★☆★☆★\n  };\n\n  return React.createElement(NoPrizedAlerter, {\n    contents: contentsList,\n    onPrizeSave: onPrizeSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(NoPrizedAlerterContainer);","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/containers/post/NoPrizedAlerterContainer.js"],"names":["React","useEffect","useDispatch","useSelector","withRouter","NoPrizedAlerter","listContentItem","NoPrizedAlerterContainer","match","history","location","dispatch","post","contentsList","loading","listError","copyOfContentsList","JSON","parse","stringify","console","log","itemToFind","find","item","taggedContest","title","indexToRemove","indexOf","splice","onPrizeSave"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,SAASC,eAAT,QAAgC,oBAAhC,C,CAEA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KAAkC;AACjE,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AADiE,uBAGdC,WAAW,CAC5D,CAAC;AAAES,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA;AAAtB,GAAD,MAAsC;AACpCF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IADyB;AAEpCG,IAAAA,SAAS,EAAEH,IAAI,CAACG,SAFoB;AAGpCD,IAAAA,OAAO,EAAEA,OAAO,CAAC,wBAAD,CAHoB;AAIpCD,IAAAA,YAAY,EAAED,IAAI,CAACC;AAJiB,GAAtC,CAD4D,CAHG;AAAA,QAGzDD,IAHyD,gBAGzDA,IAHyD;AAAA,QAGnDC,YAHmD,gBAGnDA,YAHmD;AAAA,QAGrCE,SAHqC,gBAGrCA,SAHqC;AAAA,QAG1BD,OAH0B,gBAG1BA,OAH0B;;AAYjE,MAAIE,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,YAAf,CAAX,CAAzB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYL,kBAAZ;;AACA,SAAO,IAAP,EAAa;AACX;AACA,UAAMM,UAAU,GAAGN,kBAAkB,CAACO,IAAnB,CACjBC,IAAI,IAAIA,IAAI,CAACC,aAAL,KAAuBb,IAAI,CAACc,KADnB,CAAnB;AAGA,UAAMC,aAAa,GAAGX,kBAAkB,CAACY,OAAnB,CAA2BN,UAA3B,CAAtB,CALW,CAMX;;AACA,QAAIK,aAAa,GAAG,CAAC,CAArB,EAAwB;AACtBX,MAAAA,kBAAkB,CAACa,MAAnB,CAA0BF,aAA1B,EAAyC,CAAzC;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYL,kBAAZ;AACD,KAHD,CAIA;AAJA,SAKK;AACN;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYL,kBAAZ;AACAL,IAAAA,QAAQ,CAACL,eAAe,CAAC;AAAEU,MAAAA;AAAF,KAAD,CAAhB,CAAR;AACD,GALQ,EAKN,CAACL,QAAD,CALM,CAAT,CA7BiE,CAoCjE;;AACA,QAAMmB,WAAW,GAAG,MAAM,CACxB;AACD,GAFD;;AAIA,SAAO,oBAAC,eAAD;AAAiB,IAAA,QAAQ,EAAEjB,YAA3B;AAAyC,IAAA,WAAW,EAAEiB,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA1CD;;AA4CA,eAAe1B,UAAU,CAACG,wBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport NoPrizedAlerter from '../../components/post/NoPrizedAlerter';\r\nimport { listContentItem } from '../../modules/post';\r\n\r\n//react-router-dom을 사용해 라우트로 설정한 컴포넌트는 3가지의 props를 전달받음.\r\n//match: 어떤 라우트에 매칭되었는지에 대한 정보.\r\n//history: push, replace를 통해 다른 경로로 이동하거나 앞 뒤 페이지로 전환 가능.\r\nconst NoPrizedAlerterContainer = ({ match, history, location }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { post, contentsList, listError, loading } = useSelector(\r\n    ({ post, contentsList, loading }) => ({\r\n      post: post.post,\r\n      listError: post.listError,\r\n      loading: loading['post/LIST_CONTENT_ITEM'],\r\n      contentsList: post.contentsList,\r\n    }),\r\n  );\r\n\r\n  let copyOfContentsList = JSON.parse(JSON.stringify(contentsList));\r\n  console.log(copyOfContentsList);\r\n  while (true) {\r\n    //copyOfContentsList의 각 요소의 taggedContest가 현재 대회의 title과 같지 않다면, 그 요소를 배열에서 삭제함.\r\n    const itemToFind = copyOfContentsList.find(\r\n      item => item.taggedContest !== post.title,\r\n    );\r\n    const indexToRemove = copyOfContentsList.indexOf(itemToFind);\r\n    //삭제할 요소를 찾았다면 삭제 후 루프.\r\n    if (indexToRemove > -1) {\r\n      copyOfContentsList.splice(indexToRemove, 1);\r\n      console.log(copyOfContentsList);\r\n    }\r\n    //찾지 못했다면, copyOfContentsList에 속한 모든 요소가 현재 대회에 속한 작품이라는 뜻이므로, 그대로 상태에 전달.\r\n    else break;\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(post);\r\n    console.log(contentsList);\r\n    console.log(copyOfContentsList);\r\n    dispatch(listContentItem({ copyOfContentsList }));\r\n  }, [dispatch]);\r\n\r\n  //수상 작품 등록 및 저장.\r\n  const onPrizeSave = () => {\r\n    //☆★☆★☆★☆★☆★수정 필요!!!☆★☆★☆★☆★☆★\r\n  };\r\n\r\n  return <NoPrizedAlerter contents={contentsList} onPrizeSave={onPrizeSave} />;\r\n};\r\n\r\nexport default withRouter(NoPrizedAlerterContainer);\r\n"]},"metadata":{},"sourceType":"module"}