{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects'; //===========Action Types==============\n\n/*\r\n  READ_POST = 'post/READ_POST';\r\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\r\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\r\n*/\n\nconst _createRequestActionT = createRequestActionTypes('post/READ_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      READ_POST = _createRequestActionT2[0],\n      READ_POST_SUCCESS = _createRequestActionT2[1],\n      READ_POST_FAILURE = _createRequestActionT2[2];\n\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\n\nconst GET_CONTETNS_LIST = 'post/GET_CONTETNS_LIST'; //해당 대회에 등록되어있는 작품 목록을 가져옴.\n\nconst _createRequestActionT3 = createRequestActionTypes('post/LIST_CONTENT_ITEM'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      LIST_CONTENT_ITEM = _createRequestActionT4[0],\n      LIST_CONTENT_ITEM_SUCCESS = _createRequestActionT4[1],\n      LIST_CONTENT_ITEM_FAILURE = _createRequestActionT4[2]; //===========Action 생성 함수==============\n\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\nexport const getContentsList = createAction(GET_CONTETNS_LIST); //===========사가 생성==============\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nconst getContentsListSaga = createRequestSaga(GET_CONTETNS_LIST, postsAPI.getContentList);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n  yield takeLatest(GET_CONTETNS_LIST, getContentsListSaga);\n} //===========initial state============\n\nconst initialState = {\n  post: null,\n  error: null,\n  contentsList: null\n}; //==============reducer================\n\nconst post = handleActions({\n  //actionType: (state, action) => newState\n  [READ_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [READ_POST_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  //flushes data, leaving post page.\n  [UNLOAD_POST]: () => initialState,\n  [GET_CONTETNS_LIST]: (state, {\n    payload: contentsList\n  }) => _objectSpread({}, state, {\n    contentsList\n  })\n}, initialState);\nexport default post;","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/modules/post.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","GET_CONTETNS_LIST","LIST_CONTENT_ITEM","LIST_CONTENT_ITEM_SUCCESS","LIST_CONTENT_ITEM_FAILURE","readPost","id","unloadPost","getContentsList","readPostSaga","getContentsListSaga","getContentList","postSaga","initialState","post","error","contentsList","state","payload"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;AAEA;;;;;;8BASIF,wBAAwB,CAAC,gBAAD,C;;MAH1BG,S;MACAC,iB;MACAC,iB;;AAEF,MAAMC,WAAW,GAAG,kBAApB,C,CAAwC;;AACxC,MAAMC,iBAAiB,GAAG,wBAA1B,C,CAAoD;;+BAMhDP,wBAAwB,CAAC,wBAAD,C;;MAH1BQ,iB;MACAC,yB;MACAC,yB,8BAGF;;;AAEA,OAAO,MAAMC,QAAQ,GAAGd,YAAY,CAACM,SAAD,EAAYS,EAAE,IAAIA,EAAlB,CAA7B;AACP,OAAO,MAAMC,UAAU,GAAGhB,YAAY,CAACS,WAAD,CAA/B;AACP,OAAO,MAAMQ,eAAe,GAAGjB,YAAY,CAACU,iBAAD,CAApC,C,CAEP;;AAEA,MAAMQ,YAAY,GAAGhB,iBAAiB,CAACI,SAAD,EAAYF,QAAQ,CAACU,QAArB,CAAtC;AACA,MAAMK,mBAAmB,GAAGjB,iBAAiB,CAC3CQ,iBAD2C,EAE3CN,QAAQ,CAACgB,cAFkC,CAA7C;AAIA,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAMhB,UAAU,CAACC,SAAD,EAAYY,YAAZ,CAAhB;AACA,QAAMb,UAAU,CAACK,iBAAD,EAAoBS,mBAApB,CAAhB;AACD,C,CAED;;AACA,MAAMG,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,YAAY,EAAE;AAHK,CAArB,C,CAMA;;AACA,MAAMF,IAAI,GAAGtB,aAAa,CACxB;AACE;AACA,GAACM,iBAAD,GAAqB,CAACmB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,uBAChBG,KADgB;AAEnBH,IAAAA;AAFmB,IAFvB;AAME,GAACf,iBAAD,GAAqB,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBAChBE,KADgB;AAEnBF,IAAAA;AAFmB,IANvB;AAUE;AACA,GAACf,WAAD,GAAe,MAAMa,YAXvB;AAYE,GAACZ,iBAAD,GAAqB,CAACgB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBAChBC,KADgB;AAEnBD,IAAAA;AAFmB;AAZvB,CADwB,EAkBxBH,YAlBwB,CAA1B;AAqBA,eAAeC,IAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n//===========Action Types==============\r\n\r\n/*\r\n  READ_POST = 'post/READ_POST';\r\n  READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\r\n  READ_POST_FAILURE = 'post/READ_POST_FAILURE';\r\n*/\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //flushes data, leaving post page.\r\nconst GET_CONTETNS_LIST = 'post/GET_CONTETNS_LIST'; //해당 대회에 등록되어있는 작품 목록을 가져옴.\r\n\r\nconst [\r\n  LIST_CONTENT_ITEM,\r\n  LIST_CONTENT_ITEM_SUCCESS,\r\n  LIST_CONTENT_ITEM_FAILURE,\r\n] = createRequestActionTypes('post/LIST_CONTENT_ITEM');\r\n\r\n//===========Action 생성 함수==============\r\n\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\nexport const getContentsList = createAction(GET_CONTETNS_LIST);\r\n\r\n//===========사가 생성==============\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nconst getContentsListSaga = createRequestSaga(\r\n  GET_CONTETNS_LIST,\r\n  postsAPI.getContentList,\r\n);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n  yield takeLatest(GET_CONTETNS_LIST, getContentsListSaga);\r\n}\r\n\r\n//===========initial state============\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n  contentsList: null,\r\n};\r\n\r\n//==============reducer================\r\nconst post = handleActions(\r\n  {\r\n    //actionType: (state, action) => newState\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    //flushes data, leaving post page.\r\n    [UNLOAD_POST]: () => initialState,\r\n    [GET_CONTETNS_LIST]: (state, { payload: contentsList }) => ({\r\n      ...state,\r\n      contentsList,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n"]},"metadata":{},"sourceType":"module"}