{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as mainAPI from '../lib/api/main';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst _createRequestActionT = createRequestActionTypes('main/LIST_ALL_CONTENTS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_ALL_CONTENTS = _createRequestActionT2[0],\n      LIST_ALL_CONTENTS_SUCCESS = _createRequestActionT2[1],\n      LIST_ALL_CONTENTS_FAILURE = _createRequestActionT2[2];\n\nexport const listAllContents = createAction(LIST_ALL_CONTENTS);\nconst listAllContentsSaga = createRequestSaga(LIST_ALL_CONTENTS, mainAPI.listAllContents);\nexport function* contentsSaga() {\n  yield takeLatest(LIST_ALL_CONTENTS, listAllContentsSaga);\n}\nconst initialState = {\n  allContents: null,\n  error: null\n};\nconst main = handleActions({\n  [LIST_ALL_CONTENTS_SUCCESS]: (state, {\n    payload: contents\n  }) => _objectSpread({}, state, {\n    contents\n  }),\n  [LIST_ALL_CONTENTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  })\n}, initialState);\nexport default main;","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\modules\\main.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","mainAPI","takeLatest","LIST_ALL_CONTENTS","LIST_ALL_CONTENTS_SUCCESS","LIST_ALL_CONTENTS_FAILURE","listAllContents","listAllContentsSaga","contentsSaga","initialState","allContents","error","main","state","payload","contents"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,oBAA3B;;8BAMIF,wBAAwB,CAAC,wBAAD,C;;MAH1BG,iB;MACAC,yB;MACAC,yB;;AAGF,OAAO,MAAMC,eAAe,GAAGT,YAAY,CAACM,iBAAD,CAApC;AAEP,MAAMI,mBAAmB,GAAGR,iBAAiB,CAC3CI,iBAD2C,EAE3CF,OAAO,CAACK,eAFmC,CAA7C;AAKA,OAAO,UAAUE,YAAV,GAAyB;AAC9B,QAAMN,UAAU,CAACC,iBAAD,EAAoBI,mBAApB,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,IADM;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,MAAMC,IAAI,GAAGd,aAAa,CACxB;AACE,GAACM,yBAAD,GAA6B,CAACS,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAR,uBACxBF,KADwB;AAE3BE,IAAAA;AAF2B,IAD/B;AAKE,GAACV,yBAAD,GAA6B,CAACQ,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACxBE,KADwB;AAE3BF,IAAAA;AAF2B;AAL/B,CADwB,EAWxBF,YAXwB,CAA1B;AAcA,eAAeG,IAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as mainAPI from '../lib/api/main';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_ALL_CONTENTS,\r\n  LIST_ALL_CONTENTS_SUCCESS,\r\n  LIST_ALL_CONTENTS_FAILURE,\r\n] = createRequestActionTypes('main/LIST_ALL_CONTENTS');\r\n\r\nexport const listAllContents = createAction(LIST_ALL_CONTENTS);\r\n\r\nconst listAllContentsSaga = createRequestSaga(\r\n  LIST_ALL_CONTENTS,\r\n  mainAPI.listAllContents,\r\n);\r\n\r\nexport function* contentsSaga() {\r\n  yield takeLatest(LIST_ALL_CONTENTS, listAllContentsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  allContents: null,\r\n  error: null,\r\n};\r\n\r\nconst main = handleActions(\r\n  {\r\n    [LIST_ALL_CONTENTS_SUCCESS]: (state, { payload: contents }) => ({\r\n      ...state,\r\n      contents,\r\n    }),\r\n    [LIST_ALL_CONTENTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default main;\r\n"]},"metadata":{},"sourceType":"module"}