{"ast":null,"code":"var _jsxFileName = \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/containers/contentWrite/ContentEditorContainer.js\";\nimport React, { useEffect, useCallback } from 'react';\nimport ContentEditor from '../../components/contentWrite/ContentEditor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize, setInitialState } from '../../modules/contentWrite';\n\nconst ContentEditorContainer = () => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    contentWrite\n  }) => ({\n    title: contentWrite.title,\n    body: contentWrite.body,\n    taggedContest: contentWrite.taggedContest,\n    taggedContestID: contentWrite.taggedContestID,\n    videoURL: contentWrite.videoURL,\n    team: contentWrite.team,\n    status: contentWrite.status,\n    github: contentWrite.github\n  })),\n        title = _useSelector.title,\n        body = _useSelector.body,\n        status = _useSelector.status,\n        videoURL = _useSelector.videoURL,\n        team = _useSelector.team,\n        taggedContest = _useSelector.taggedContest,\n        taggedContestID = _useSelector.taggedContestID,\n        github = _useSelector.github;\n\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [dispatch]);\n  useEffect(() => {\n    return () => {\n      //unmount시 contentWrite와 관련된 상태를 초기화 하는데 사용\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n  return React.createElement(ContentEditor, {\n    onChangeField: onChangeField,\n    title: title,\n    body: body,\n    taggedContest: taggedContest,\n    taggedContestID: taggedContestID,\n    videoURL: videoURL,\n    team: team,\n    status: status,\n    github: github,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n};\n\nexport default ContentEditorContainer;","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/containers/contentWrite/ContentEditorContainer.js"],"names":["React","useEffect","useCallback","ContentEditor","useSelector","useDispatch","changeField","initialize","setInitialState","ContentEditorContainer","dispatch","contentWrite","title","body","taggedContest","taggedContestID","videoURL","team","status","github","onChangeField","payload"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,eAHF,QAIO,4BAJP;;AAMA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AADmC,uBAW/BD,WAAW,CAAC,CAAC;AAAEO,IAAAA;AAAF,GAAD,MAAuB;AACrCC,IAAAA,KAAK,EAAED,YAAY,CAACC,KADiB;AAErCC,IAAAA,IAAI,EAAEF,YAAY,CAACE,IAFkB;AAGrCC,IAAAA,aAAa,EAAEH,YAAY,CAACG,aAHS;AAIrCC,IAAAA,eAAe,EAAEJ,YAAY,CAACI,eAJO;AAKrCC,IAAAA,QAAQ,EAAEL,YAAY,CAACK,QALc;AAMrCC,IAAAA,IAAI,EAAEN,YAAY,CAACM,IANkB;AAOrCC,IAAAA,MAAM,EAAEP,YAAY,CAACO,MAPgB;AAQrCC,IAAAA,MAAM,EAAER,YAAY,CAACQ;AARgB,GAAvB,CAAD,CAXoB;AAAA,QAGjCP,KAHiC,gBAGjCA,KAHiC;AAAA,QAIjCC,IAJiC,gBAIjCA,IAJiC;AAAA,QAKjCK,MALiC,gBAKjCA,MALiC;AAAA,QAMjCF,QANiC,gBAMjCA,QANiC;AAAA,QAOjCC,IAPiC,gBAOjCA,IAPiC;AAAA,QAQjCH,aARiC,gBAQjCA,aARiC;AAAA,QASjCC,eATiC,gBASjCA,eATiC;AAAA,QAUjCI,MAViC,gBAUjCA,MAViC;;AAqBnC,QAAMC,aAAa,GAAGlB,WAAW,CAC9BmB,OAAD,IAAaX,QAAQ,CAACJ,WAAW,CAACe,OAAD,CAAZ,CADU,EAE/B,CAACX,QAAD,CAF+B,CAAjC;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX;AACAS,MAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACD,KAHD;AAID,GALQ,EAKN,CAACG,QAAD,CALM,CAAT;AAOA,SACE,oBAAC,aAAD;AACE,IAAA,aAAa,EAAEU,aADjB;AAEE,IAAA,KAAK,EAAER,KAFT;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,aAAa,EAAEC,aAJjB;AAKE,IAAA,eAAe,EAAEC,eALnB;AAME,IAAA,QAAQ,EAAEC,QANZ;AAOE,IAAA,IAAI,EAAEC,IAPR;AAQE,IAAA,MAAM,EAAEC,MARV;AASE,IAAA,MAAM,EAAEC,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAaD,CA9CD;;AAgDA,eAAeV,sBAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport ContentEditor from '../../components/contentWrite/ContentEditor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  changeField,\n  initialize,\n  setInitialState,\n} from '../../modules/contentWrite';\n\nconst ContentEditorContainer = () => {\n  const dispatch = useDispatch();\n  const {\n    title,\n    body,\n    status,\n    videoURL,\n    team,\n    taggedContest,\n    taggedContestID,\n    github,\n  } = useSelector(({ contentWrite }) => ({\n    title: contentWrite.title,\n    body: contentWrite.body,\n    taggedContest: contentWrite.taggedContest,\n    taggedContestID: contentWrite.taggedContestID,\n    videoURL: contentWrite.videoURL,\n    team: contentWrite.team,\n    status: contentWrite.status,\n    github: contentWrite.github,\n  }));\n  const onChangeField = useCallback(\n    (payload) => dispatch(changeField(payload)),\n    [dispatch],\n  );\n\n  useEffect(() => {\n    return () => {\n      //unmount시 contentWrite와 관련된 상태를 초기화 하는데 사용\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n\n  return (\n    <ContentEditor\n      onChangeField={onChangeField}\n      title={title}\n      body={body}\n      taggedContest={taggedContest}\n      taggedContestID={taggedContestID}\n      videoURL={videoURL}\n      team={team}\n      status={status}\n      github={github}\n    />\n  );\n};\n\nexport default ContentEditorContainer;\n"]},"metadata":{},"sourceType":"module"}