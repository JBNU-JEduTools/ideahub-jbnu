{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\write\\\\WriteActionButtonsContainer.js\";\nimport React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({\n  history\n}) => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    write\n  }) => ({\n    title: write.title,\n    category: write.category,\n    status: write.status,\n    date: write.date,\n    place: write.place,\n    description: write.description,\n    post: write.post,\n    postError: write.postError\n  })),\n        title = _useSelector.title,\n        category = _useSelector.category,\n        status = _useSelector.status,\n        date = _useSelector.date,\n        place = _useSelector.place,\n        description = _useSelector.description,\n        post = _useSelector.post,\n        postError = _useSelector.postError;\n\n  const onPublish = () => {\n    dispatch(writePost({\n      title,\n      category,\n      status,\n      date,\n      place,\n      description\n    }));\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  useEffect(() => {\n    if (post) {\n      const _id = post._id,\n            user = post.user;\n      history.push(\"/@\".concat(user.username, \"/\").concat(_id));\n    }\n\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return React.createElement(WriteActionButtons, {\n    onPublish: onPublish,\n    onCancel: onCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(WriteActionButtonsContainer);","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\containers\\write\\WriteActionButtonsContainer.js"],"names":["React","useEffect","WriteActionButtons","useSelector","useDispatch","withRouter","writePost","WriteActionButtonsContainer","history","dispatch","write","title","category","status","date","place","description","post","postError","onPublish","onCancel","goBack","_id","user","push","username","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,kBAAP,MAA+B,2CAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,MAAMC,2BAA2B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACnD,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AADmD,uBAW/CD,WAAW,CAAC,CAAC;AAAEO,IAAAA;AAAF,GAAD,MAAgB;AAC9BC,IAAAA,KAAK,EAAED,KAAK,CAACC,KADiB;AAE9BC,IAAAA,QAAQ,EAAEF,KAAK,CAACE,QAFc;AAG9BC,IAAAA,MAAM,EAAEH,KAAK,CAACG,MAHgB;AAI9BC,IAAAA,IAAI,EAAEJ,KAAK,CAACI,IAJkB;AAK9BC,IAAAA,KAAK,EAAEL,KAAK,CAACK,KALiB;AAM9BC,IAAAA,WAAW,EAAEN,KAAK,CAACM,WANW;AAO9BC,IAAAA,IAAI,EAAEP,KAAK,CAACO,IAPkB;AAQ9BC,IAAAA,SAAS,EAAER,KAAK,CAACQ;AARa,GAAhB,CAAD,CAXoC;AAAA,QAGjDP,KAHiD,gBAGjDA,KAHiD;AAAA,QAIjDC,QAJiD,gBAIjDA,QAJiD;AAAA,QAKjDC,MALiD,gBAKjDA,MALiD;AAAA,QAMjDC,IANiD,gBAMjDA,IANiD;AAAA,QAOjDC,KAPiD,gBAOjDA,KAPiD;AAAA,QAQjDC,WARiD,gBAQjDA,WARiD;AAAA,QASjDC,IATiD,gBASjDA,IATiD;AAAA,QAUjDC,SAViD,gBAUjDA,SAViD;;AAsBnD,QAAMC,SAAS,GAAG,MAAM;AACtBV,IAAAA,QAAQ,CACNH,SAAS,CAAC;AACRK,MAAAA,KADQ;AAERC,MAAAA,QAFQ;AAGRC,MAAAA,MAHQ;AAIRC,MAAAA,IAJQ;AAKRC,MAAAA,KALQ;AAMRC,MAAAA;AANQ,KAAD,CADH,CAAR;AAUD,GAXD;;AAaA,QAAMI,QAAQ,GAAG,MAAM;AACrBZ,IAAAA,OAAO,CAACa,MAAR;AACD,GAFD;;AAIApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,IAAJ,EAAU;AAAA,YACAK,GADA,GACcL,IADd,CACAK,GADA;AAAA,YACKC,IADL,GACcN,IADd,CACKM,IADL;AAERf,MAAAA,OAAO,CAACgB,IAAR,aAAkBD,IAAI,CAACE,QAAvB,cAAmCH,GAAnC;AACD;;AACD,QAAIJ,SAAJ,EAAe;AACbQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACD;AACF,GARQ,EAQN,CAACV,OAAD,EAAUS,IAAV,EAAgBC,SAAhB,CARM,CAAT;AASA,SAAO,oBAAC,kBAAD;AAAoB,IAAA,SAAS,EAAEC,SAA/B;AAA0C,IAAA,QAAQ,EAAEC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAjDD;;AAmDA,eAAef,UAAU,CAACE,2BAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    title,\r\n    category,\r\n    status,\r\n    date,\r\n    place,\r\n    description,\r\n    post,\r\n    postError,\r\n  } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    category: write.category,\r\n    status: write.status,\r\n    date: write.date,\r\n    place: write.place,\r\n    description: write.description,\r\n    post: write.post,\r\n    postError: write.postError,\r\n  }));\r\n\r\n  const onPublish = () => {\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        category,\r\n        status,\r\n        date,\r\n        place,\r\n        description,\r\n      }),\r\n    );\r\n  };\r\n\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return <WriteActionButtons onPublish={onPublish} onCancel={onCancel} />;\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n"]},"metadata":{},"sourceType":"module"}