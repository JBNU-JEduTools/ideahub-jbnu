{"ast":null,"code":"var _jsxFileName = \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/containers/content/ContentViewerContainer.js\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readContent, unloadContent } from '../../modules/content';\nimport ContentViewer from '../../components/content/ContentViewer';\nimport ContentActionButtons from '../../components/content/ContentActionButtons';\nimport { setOriginalContent } from '../../modules/contentWrite';\nimport { removeContent, giveStar, unStar } from '../../lib/api/contentPosts';\n\nconst ContentViewerContainer = ({\n  match,\n  history\n}) => {\n  const contentId = match.params.contentId;\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    content,\n    loading,\n    user\n  }) => ({\n    content: content.content,\n    error: content.error,\n    loading: loading['content/READ_CONTENT'],\n    user: user.user\n  })),\n        content = _useSelector.content,\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        user = _useSelector.user;\n\n  useEffect(() => {\n    dispatch(readContent(contentId));\n    return () => {\n      dispatch(unloadContent());\n    };\n  }, [dispatch, contentId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalContent(content));\n    history.push('/contentwrite');\n  }; //작품 삭제 후 메인 페이지로 이동\n\n\n  const onRemove = async () => {\n    try {\n      await removeContent(contentId);\n      history.push('/');\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  /*\n  ☆★☆★☆★☆★☆★☆ TODO ★☆★☆★☆★☆★☆★\n  새로고침 말고 새로운 방법 찾아보기. 부드럽지가 않다.\n  현재 유저가 star를 눌렀는지 스스로 확인할 수 있도록 (이미지로)구분 하자.\n  ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★\n  */\n  //작품에 star(like, unlike)를 눌렀을 때 동작\n\n\n  const onStar = () => {\n    if (!user) {\n      alert('로그인 후에 이용 가능한 서비스 입니다.');\n      history.push('/login');\n    } else {\n      const star_edUser = content.star_edUser;\n      const isInList = star_edUser.find(item => item === user._id); //star누른 유저 목록에 현재 유저가 있으면\n\n      if (isInList) {\n        unStar({\n          content,\n          user\n        });\n        window.location.reload();\n      } else {\n        giveStar({\n          content,\n          user\n        });\n        window.location.reload();\n      }\n    }\n  };\n\n  return React.createElement(ContentViewer, {\n    content: content,\n    loading: loading,\n    error: error,\n    user: user,\n    actionButtons: React.createElement(ContentActionButtons, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }),\n    onStar: onStar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(ContentViewerContainer);","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/containers/content/ContentViewerContainer.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","withRouter","readContent","unloadContent","ContentViewer","ContentActionButtons","setOriginalContent","removeContent","giveStar","unStar","ContentViewerContainer","match","history","contentId","params","dispatch","content","loading","user","error","onEdit","push","onRemove","e","console","log","onStar","alert","star_edUser","isInList","find","item","_id","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readContent, unloadContent } from '../../modules/content';\nimport ContentViewer from '../../components/content/ContentViewer';\nimport ContentActionButtons from '../../components/content/ContentActionButtons';\nimport { setOriginalContent } from '../../modules/contentWrite';\nimport { removeContent, giveStar, unStar } from '../../lib/api/contentPosts';\n\nconst ContentViewerContainer = ({ match, history }) => {\n  const { contentId } = match.params;\n  const dispatch = useDispatch();\n  const { content, error, loading, user } = useSelector(\n    ({ content, loading, user }) => ({\n      content: content.content,\n      error: content.error,\n      loading: loading['content/READ_CONTENT'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readContent(contentId));\n    return () => {\n      dispatch(unloadContent());\n    };\n  }, [dispatch, contentId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalContent(content));\n    history.push('/contentwrite');\n  };\n\n  //작품 삭제 후 메인 페이지로 이동\n  const onRemove = async () => {\n    try {\n      await removeContent(contentId);\n      history.push('/');\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  /*\n  ☆★☆★☆★☆★☆★☆ TODO ★☆★☆★☆★☆★☆★\n  새로고침 말고 새로운 방법 찾아보기. 부드럽지가 않다.\n  현재 유저가 star를 눌렀는지 스스로 확인할 수 있도록 (이미지로)구분 하자.\n  ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★\n  */\n  //작품에 star(like, unlike)를 눌렀을 때 동작\n  const onStar = () => {\n    if (!user) {\n      alert('로그인 후에 이용 가능한 서비스 입니다.');\n      history.push('/login');\n    } else {\n      const { star_edUser } = content;\n      const isInList = star_edUser.find((item) => item === user._id);\n      //star누른 유저 목록에 현재 유저가 있으면\n      if (isInList) {\n        unStar({ content, user });\n        window.location.reload();\n      } else {\n        giveStar({ content, user });\n        window.location.reload();\n      }\n    }\n  };\n\n  return (\n    <ContentViewer\n      content={content}\n      loading={loading}\n      error={error}\n      user={user}\n      actionButtons={\n        <ContentActionButtons onEdit={onEdit} onRemove={onRemove} />\n      }\n      onStar={onStar}\n    />\n  );\n};\n\nexport default withRouter(ContentViewerContainer);\n"]},"metadata":{},"sourceType":"module"}