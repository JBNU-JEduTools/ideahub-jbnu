{"ast":null,"code":"import _defineProperty from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/qwerasdf_ho/Desktop/ideaHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//리덕스에 사용될 액션 타입, 액션 생성함수, 리듀서 등을 정의.\n//user 정보를 얻거나 수정.\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as usersAPI from '../lib/api/users';\nimport { takeLatest } from 'redux-saga/effects'; //==============액션 타입 정의=============\n\nconst _createRequestActionT = createRequestActionTypes('users/LIST_USERS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_USERS = _createRequestActionT2[0],\n      LIST_USERS_SUCCESS = _createRequestActionT2[1],\n      LIST_USERS_FAILURE = _createRequestActionT2[2]; //유저 정보를 변경하는 액션\n\n\nconst UPDATE_USERS = 'users/UPDATE_USERS'; //==========액션 생성 함수===============\n\nexport const listUsers = createAction(LIST_USERS);\nexport const updateUsers = createAction(UPDATE_USERS); //=========리덕스 사가 생성==============\n\nconst listUsersSaga = createRequestSaga(LIST_USERS, usersAPI.listUsers);\nconst updateUsersSaga = createRequestSaga(UPDATE_USERS, usersAPI.updateUsers);\nexport function* usersSaga() {\n  yield takeLatest(LIST_USERS, listUsersSaga);\n  yield takeLatest(UPDATE_USERS, updateUsersSaga);\n} //=========initial state (초기 상태) 정의===========\n\nconst initialSate = {\n  users: null,\n  error: null,\n  userItem: null //administer 페이지에서, 유저 role 변경 시 변경 될 유저 정보와 새로운 role을 담음.\n\n}; //=========리듀서 정의(combine reducers와 같은 동작)============\n//************유저 상태를 변경하는 리듀서 필요.*******************\n\nconst users = handleActions({\n  [LIST_USERS_SUCCESS]: (state, {\n    payload: users\n  }) => _objectSpread({}, state, {\n    users\n  }),\n  [LIST_USERS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  //확인\n  [UPDATE_USERS]: (state, {\n    payload: userItem\n  }) => _objectSpread({}, state, {\n    userItem\n  })\n}, initialSate);\nexport default users;","map":{"version":3,"sources":["/Users/qwerasdf_ho/Desktop/ideaHub/frontend/src/modules/users.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","usersAPI","takeLatest","LIST_USERS","LIST_USERS_SUCCESS","LIST_USERS_FAILURE","UPDATE_USERS","listUsers","updateUsers","listUsersSaga","updateUsersSaga","usersSaga","initialSate","users","error","userItem","state","payload"],"mappings":";;;;;;;AAAA;AACA;AAEA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;;8BAKIF,wBAAwB,CAAC,kBAAD,C;;MAH1BG,U;MACAC,kB;MACAC,kB,8BAEF;;;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAGV,YAAY,CAACM,UAAD,CAA9B;AACP,OAAO,MAAMK,WAAW,GAAGX,YAAY,CAACS,YAAD,CAAhC,C,CAEP;;AAEA,MAAMG,aAAa,GAAGV,iBAAiB,CAACI,UAAD,EAAaF,QAAQ,CAACM,SAAtB,CAAvC;AACA,MAAMG,eAAe,GAAGX,iBAAiB,CAACO,YAAD,EAAeL,QAAQ,CAACO,WAAxB,CAAzC;AACA,OAAO,UAAUG,SAAV,GAAsB;AAC3B,QAAMT,UAAU,CAACC,UAAD,EAAaM,aAAb,CAAhB;AACA,QAAMP,UAAU,CAACI,YAAD,EAAeI,eAAf,CAAhB;AACD,C,CAED;;AACA,MAAME,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,IADW;AAElBC,EAAAA,KAAK,EAAE,IAFW;AAGlBC,EAAAA,QAAQ,EAAE,IAHQ,CAGF;;AAHE,CAApB,C,CAMA;AACA;;AACA,MAAMF,KAAK,GAAGf,aAAa,CACzB;AACE,GAACM,kBAAD,GAAsB,CAACY,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,uBACjBG,KADiB;AAEpBH,IAAAA;AAFoB,IADxB;AAKE,GAACR,kBAAD,GAAsB,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACjBE,KADiB;AAEpBF,IAAAA;AAFoB,IALxB;AASE;AACA,GAACR,YAAD,GAAgB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBACXC,KADW;AAEdD,IAAAA;AAFc;AAVlB,CADyB,EAgBzBH,WAhByB,CAA3B;AAmBA,eAAeC,KAAf","sourcesContent":["//리덕스에 사용될 액션 타입, 액션 생성함수, 리듀서 등을 정의.\n//user 정보를 얻거나 수정.\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as usersAPI from '../lib/api/users';\nimport { takeLatest } from 'redux-saga/effects';\n\n//==============액션 타입 정의=============\nconst [\n  LIST_USERS,\n  LIST_USERS_SUCCESS,\n  LIST_USERS_FAILURE,\n] = createRequestActionTypes('users/LIST_USERS');\n//유저 정보를 변경하는 액션\nconst UPDATE_USERS = 'users/UPDATE_USERS';\n\n//==========액션 생성 함수===============\nexport const listUsers = createAction(LIST_USERS);\nexport const updateUsers = createAction(UPDATE_USERS);\n\n//=========리덕스 사가 생성==============\n\nconst listUsersSaga = createRequestSaga(LIST_USERS, usersAPI.listUsers);\nconst updateUsersSaga = createRequestSaga(UPDATE_USERS, usersAPI.updateUsers);\nexport function* usersSaga() {\n  yield takeLatest(LIST_USERS, listUsersSaga);\n  yield takeLatest(UPDATE_USERS, updateUsersSaga);\n}\n\n//=========initial state (초기 상태) 정의===========\nconst initialSate = {\n  users: null,\n  error: null,\n  userItem: null, //administer 페이지에서, 유저 role 변경 시 변경 될 유저 정보와 새로운 role을 담음.\n};\n\n//=========리듀서 정의(combine reducers와 같은 동작)============\n//************유저 상태를 변경하는 리듀서 필요.*******************\nconst users = handleActions(\n  {\n    [LIST_USERS_SUCCESS]: (state, { payload: users }) => ({\n      ...state,\n      users,\n    }),\n    [LIST_USERS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    //확인\n    [UPDATE_USERS]: (state, { payload: userItem }) => ({\n      ...state,\n      userItem,\n    }),\n  },\n  initialSate,\n);\n\nexport default users;\n"]},"metadata":{},"sourceType":"module"}