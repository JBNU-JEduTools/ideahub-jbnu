{"ast":null,"code":"import _defineProperty from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects'; //action type\n\nconst INITIALIZE = 'write/INITIALIZE'; //모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key값 바꾸기\n\nconst _createRequestActionT = createRequestActionTypes('write/WRITE_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      WRITE_POST = _createRequestActionT2[0],\n      WRITE_POST_SUCCESS = _createRequestActionT2[1],\n      WRITE_POST_FAILURE = _createRequestActionT2[2];\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST'; // 글 수정\n\nconst _createRequestActionT3 = createRequestActionTypes('write/UPDATE_POST'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      UPDATE_POST = _createRequestActionT4[0],\n      UPDATE_POST_SUCCESS = _createRequestActionT4[1],\n      UPDATE_POST_FAILURE = _createRequestActionT4[2]; //action creating functions\n\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  category,\n  status,\n  date,\n  place,\n  description\n}) => ({\n  title,\n  category,\n  status,\n  date,\n  place,\n  description\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(UPDATE_POST, ({\n  id,\n  title,\n  category,\n  status,\n  date,\n  place,\n  description\n}) => ({\n  title,\n  category,\n  status,\n  date,\n  place,\n  description\n})); //create saga\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n} //initial state\n\nconst initialState = {\n  title: '',\n  category: '',\n  status: '',\n  date: '',\n  place: '',\n  description: '',\n  post: null,\n  postError: null,\n  originalPostId: null\n}; //reducer\n\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value\n  }),\n  [WRITE_POST]: state => _objectSpread({}, state, {\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [WRITE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => _objectSpread({}, state, {\n    postError\n  }),\n  [SET_ORIGINAL_POST]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    title: post.title,\n    category: post.category,\n    status: post.status,\n    date: post.date,\n    place: post.place,\n    description: post.description,\n    originalPostId: post._id\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","changeField","key","value","writePost","title","category","status","date","place","description","setOriginalPost","post","updatePost","id","writePostSaga","writeSaga","initialState","postError","originalPostId","write","state","payload","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n//action type\r\nconst INITIALIZE = 'write/INITIALIZE'; //모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST');\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST'; // 글 수정\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST');\r\n\r\n//action creating functions\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(\r\n  WRITE_POST,\r\n  ({ title, category, status, date, place, description }) => ({\r\n    title,\r\n    category,\r\n    status,\r\n    date,\r\n    place,\r\n    description,\r\n  }),\r\n);\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, category, status, date, place, description }) => ({\r\n    title,\r\n    category,\r\n    status,\r\n    date,\r\n    place,\r\n    description,\r\n  }),\r\n);\r\n\r\n//create saga\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n}\r\n\r\n//initial state\r\nconst initialState = {\r\n  title: '',\r\n  category: '',\r\n  status: '',\r\n  date: '',\r\n  place: '',\r\n  description: '',\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\n//reducer\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState,\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value,\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      category: post.category,\r\n      status: post.status,\r\n      date: post.date,\r\n      place: post.place,\r\n      description: post.description,\r\n      originalPostId: post._id,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n"]},"metadata":{},"sourceType":"module"}