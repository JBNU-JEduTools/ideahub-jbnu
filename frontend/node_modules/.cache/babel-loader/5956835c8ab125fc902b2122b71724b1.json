{"ast":null,"code":"import qs from 'qs';\nimport client from './client';\nexport const contentWritePost = ({\n  title,\n  body,\n  taggedContest,\n  videoURL,\n  team,\n  status,\n  github\n}) => client.post('/api/contents', {\n  title,\n  body,\n  taggedContest,\n  videoURL,\n  team,\n  status,\n  github\n});\nexport const readContent = id => client.get(\"/api/contents/\".concat(id));\nexport const listContents = ({\n  page,\n  taggedContest\n}) => {\n  const queryString = qs.stringify({\n    page,\n    taggedContest\n  });\n  return client.get(\"/api/contents?\".concat(queryString), {\n    params: {\n      taggedContest: queryString.taggedContest\n    }\n  });\n};\nexport const updateContent = ({\n  id,\n  title,\n  body,\n  taggedContest,\n  videoURL,\n  team,\n  status,\n  stars,\n  github\n}) => client.patch(\"/api/contents/\".concat(id), {\n  title,\n  body,\n  taggedContest,\n  videoURL,\n  team,\n  status,\n  stars,\n  github\n});\nexport const removeContent = id => client.delete(\"/api/contents/\".concat(id)); //star 버튼 클릭 시 현재 작품의 star에 1을 더하고, star를 누른 유저 목록에 현재 로그인한 유저 등록.\n\nexport const giveStar = ({\n  content,\n  user\n}) => {\n  //로그인 한 상태일 때\n  if (user) {\n    const _id = content._id,\n          stars = content.stars,\n          star_edUser = content.star_edUser; //star누른 유저 목록에 현재 로그인한 유저가 없을 경우에만.\n\n    const isInList = star_edUser.find(item => item === user._id);\n\n    if (!isInList) {\n      return client.patch(\"/api/contents/\".concat(_id), {\n        stars: stars + 1,\n        star_edUser: [...star_edUser, user._id]\n      });\n    }\n  }\n}; //star를 취소\n\nexport const unStar = ({\n  content,\n  user\n}) => {\n  //로그인 한 상태일 때\n  if (user) {\n    const _id = content._id,\n          stars = content.stars,\n          star_edUser = content.star_edUser; //star누른 유저 목록에 현재 로그인한 유저가 없을 경우에만.\n\n    const indexOfItem = star_edUser.findIndex(item => item === user._id); //유저 목록에 현재 유저가 존재 할 때, unStar 작업 진행.\n\n    if (indexOfItem > -1) {\n      let star_edUserCopy = JSON.parse(JSON.stringify(star_edUser));\n      star_edUserCopy.splice(indexOfItem, 1);\n      return client.patch(\"/api/contents/\".concat(_id), {\n        stars: stars - 1,\n        star_edUser: star_edUserCopy\n      });\n    }\n  }\n}; //수상 정보를 업데이트(디폴트: '-')\n\nexport const updatePrize = ({\n  content,\n  priority\n}) => {\n  const _id = content._id;\n  return client.patch(\"/api/contents/\".concat(_id), {\n    prizedPlace: priority\n  });\n};","map":{"version":3,"sources":["C:\\repusjh_Git\\cmanager-public\\frontend\\src\\lib\\api\\contentPosts.js"],"names":["qs","client","contentWritePost","title","body","taggedContest","videoURL","team","status","github","post","readContent","id","get","listContents","page","queryString","stringify","params","updateContent","stars","patch","removeContent","delete","giveStar","content","user","_id","star_edUser","isInList","find","item","unStar","indexOfItem","findIndex","star_edUserCopy","JSON","parse","splice","updatePrize","priority","prizedPlace"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAC/BC,EAAAA,KAD+B;AAE/BC,EAAAA,IAF+B;AAG/BC,EAAAA,aAH+B;AAI/BC,EAAAA,QAJ+B;AAK/BC,EAAAA,IAL+B;AAM/BC,EAAAA,MAN+B;AAO/BC,EAAAA;AAP+B,CAAD,KAS9BR,MAAM,CAACS,IAAP,CAAY,eAAZ,EAA6B;AAC3BP,EAAAA,KAD2B;AAE3BC,EAAAA,IAF2B;AAG3BC,EAAAA,aAH2B;AAI3BC,EAAAA,QAJ2B;AAK3BC,EAAAA,IAL2B;AAM3BC,EAAAA,MAN2B;AAO3BC,EAAAA;AAP2B,CAA7B,CATK;AAmBP,OAAO,MAAME,WAAW,GAAIC,EAAD,IAAQX,MAAM,CAACY,GAAP,yBAA4BD,EAA5B,EAA5B;AAEP,OAAO,MAAME,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQV,EAAAA;AAAR,CAAD,KAA6B;AACvD,QAAMW,WAAW,GAAGhB,EAAE,CAACiB,SAAH,CAAa;AAC/BF,IAAAA,IAD+B;AAE/BV,IAAAA;AAF+B,GAAb,CAApB;AAIA,SAAOJ,MAAM,CAACY,GAAP,yBAA4BG,WAA5B,GAA2C;AAChDE,IAAAA,MAAM,EAAE;AACNb,MAAAA,aAAa,EAAEW,WAAW,CAACX;AADrB;AADwC,GAA3C,CAAP;AAKD,CAVM;AAYP,OAAO,MAAMc,aAAa,GAAG,CAAC;AAC5BP,EAAAA,EAD4B;AAE5BT,EAAAA,KAF4B;AAG5BC,EAAAA,IAH4B;AAI5BC,EAAAA,aAJ4B;AAK5BC,EAAAA,QAL4B;AAM5BC,EAAAA,IAN4B;AAO5BC,EAAAA,MAP4B;AAQ5BY,EAAAA,KAR4B;AAS5BX,EAAAA;AAT4B,CAAD,KAW3BR,MAAM,CAACoB,KAAP,yBAA8BT,EAA9B,GAAoC;AAClCT,EAAAA,KADkC;AAElCC,EAAAA,IAFkC;AAGlCC,EAAAA,aAHkC;AAIlCC,EAAAA,QAJkC;AAKlCC,EAAAA,IALkC;AAMlCC,EAAAA,MANkC;AAOlCY,EAAAA,KAPkC;AAQlCX,EAAAA;AARkC,CAApC,CAXK;AAsBP,OAAO,MAAMa,aAAa,GAAIV,EAAD,IAAQX,MAAM,CAACsB,MAAP,yBAA+BX,EAA/B,EAA9B,C,CAEP;;AACA,OAAO,MAAMY,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuB;AAC7C;AACA,MAAIA,IAAJ,EAAU;AAAA,UACAC,GADA,GAC4BF,OAD5B,CACAE,GADA;AAAA,UACKP,KADL,GAC4BK,OAD5B,CACKL,KADL;AAAA,UACYQ,WADZ,GAC4BH,OAD5B,CACYG,WADZ,EAER;;AACA,UAAMC,QAAQ,GAAGD,WAAW,CAACE,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,KAAKL,IAAI,CAACC,GAAzC,CAAjB;;AACA,QAAI,CAACE,QAAL,EAAe;AACb,aAAO5B,MAAM,CAACoB,KAAP,yBAA8BM,GAA9B,GAAqC;AAC1CP,QAAAA,KAAK,EAAEA,KAAK,GAAG,CAD2B;AAE1CQ,QAAAA,WAAW,EAAE,CAAC,GAAGA,WAAJ,EAAiBF,IAAI,CAACC,GAAtB;AAF6B,OAArC,CAAP;AAID;AACF;AACF,CAbM,C,CAeP;;AACA,OAAO,MAAMK,MAAM,GAAG,CAAC;AAAEP,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuB;AAC3C;AACA,MAAIA,IAAJ,EAAU;AAAA,UACAC,GADA,GAC4BF,OAD5B,CACAE,GADA;AAAA,UACKP,KADL,GAC4BK,OAD5B,CACKL,KADL;AAAA,UACYQ,WADZ,GAC4BH,OAD5B,CACYG,WADZ,EAER;;AACA,UAAMK,WAAW,GAAGL,WAAW,CAACM,SAAZ,CAAuBH,IAAD,IAAUA,IAAI,KAAKL,IAAI,CAACC,GAA9C,CAApB,CAHQ,CAIR;;AACA,QAAIM,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpB,UAAIE,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACnB,SAAL,CAAeW,WAAf,CAAX,CAAtB;AACAO,MAAAA,eAAe,CAACG,MAAhB,CAAuBL,WAAvB,EAAoC,CAApC;AAEA,aAAOhC,MAAM,CAACoB,KAAP,yBAA8BM,GAA9B,GAAqC;AAC1CP,QAAAA,KAAK,EAAEA,KAAK,GAAG,CAD2B;AAE1CQ,QAAAA,WAAW,EAAEO;AAF6B,OAArC,CAAP;AAID;AACF;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMI,WAAW,GAAG,CAAC;AAAEd,EAAAA,OAAF;AAAWe,EAAAA;AAAX,CAAD,KAA2B;AAAA,QAC5Cb,GAD4C,GACpCF,OADoC,CAC5CE,GAD4C;AAEpD,SAAO1B,MAAM,CAACoB,KAAP,yBAA8BM,GAA9B,GAAqC;AAC1Cc,IAAAA,WAAW,EAAED;AAD6B,GAArC,CAAP;AAGD,CALM","sourcesContent":["import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const contentWritePost = ({\r\n  title,\r\n  body,\r\n  taggedContest,\r\n  videoURL,\r\n  team,\r\n  status,\r\n  github,\r\n}) =>\r\n  client.post('/api/contents', {\r\n    title,\r\n    body,\r\n    taggedContest,\r\n    videoURL,\r\n    team,\r\n    status,\r\n    github,\r\n  });\r\n\r\nexport const readContent = (id) => client.get(`/api/contents/${id}`);\r\n\r\nexport const listContents = ({ page, taggedContest }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    taggedContest,\r\n  });\r\n  return client.get(`/api/contents?${queryString}`, {\r\n    params: {\r\n      taggedContest: queryString.taggedContest,\r\n    },\r\n  });\r\n};\r\n\r\nexport const updateContent = ({\r\n  id,\r\n  title,\r\n  body,\r\n  taggedContest,\r\n  videoURL,\r\n  team,\r\n  status,\r\n  stars,\r\n  github,\r\n}) =>\r\n  client.patch(`/api/contents/${id}`, {\r\n    title,\r\n    body,\r\n    taggedContest,\r\n    videoURL,\r\n    team,\r\n    status,\r\n    stars,\r\n    github,\r\n  });\r\n\r\nexport const removeContent = (id) => client.delete(`/api/contents/${id}`);\r\n\r\n//star 버튼 클릭 시 현재 작품의 star에 1을 더하고, star를 누른 유저 목록에 현재 로그인한 유저 등록.\r\nexport const giveStar = ({ content, user }) => {\r\n  //로그인 한 상태일 때\r\n  if (user) {\r\n    const { _id, stars, star_edUser } = content;\r\n    //star누른 유저 목록에 현재 로그인한 유저가 없을 경우에만.\r\n    const isInList = star_edUser.find((item) => item === user._id);\r\n    if (!isInList) {\r\n      return client.patch(`/api/contents/${_id}`, {\r\n        stars: stars + 1,\r\n        star_edUser: [...star_edUser, user._id],\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n//star를 취소\r\nexport const unStar = ({ content, user }) => {\r\n  //로그인 한 상태일 때\r\n  if (user) {\r\n    const { _id, stars, star_edUser } = content;\r\n    //star누른 유저 목록에 현재 로그인한 유저가 없을 경우에만.\r\n    const indexOfItem = star_edUser.findIndex((item) => item === user._id);\r\n    //유저 목록에 현재 유저가 존재 할 때, unStar 작업 진행.\r\n    if (indexOfItem > -1) {\r\n      let star_edUserCopy = JSON.parse(JSON.stringify(star_edUser));\r\n      star_edUserCopy.splice(indexOfItem, 1);\r\n\r\n      return client.patch(`/api/contents/${_id}`, {\r\n        stars: stars - 1,\r\n        star_edUser: star_edUserCopy,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n//수상 정보를 업데이트(디폴트: '-')\r\nexport const updatePrize = ({ content, priority }) => {\r\n  const { _id } = content;\r\n  return client.patch(`/api/contents/${_id}`, {\r\n    prizedPlace: priority,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}