{"ast":null,"code":"var _jsxFileName = \"C:\\\\repusjh_Git\\\\cmanager-public\\\\frontend\\\\src\\\\containers\\\\post\\\\PostViewerContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\n\nconst PostViewerContainer = ({\n  match,\n  history\n}) => {\n  const postId = match.params.postId;\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    post,\n    loading,\n    user\n  }) => ({\n    post: post.post,\n    error: post.error,\n    loading: loading['post/READ_POST'],\n    user: user.user\n  })),\n        post = _useSelector.post,\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        user = _useSelector.user;\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  console.log(user);\n  console.log(post);\n  return React.createElement(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error,\n    actionButtons: React.createElement(PostActionButtons, {\n      onEdit: onEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }),\n    ownPost: user && user._id === post && post.user._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(PostViewerContainer);","map":{"version":3,"sources":["C:/repusjh_Git/cmanager-public/frontend/src/containers/post/PostViewerContainer.js"],"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","setOriginalPost","PostViewerContainer","match","history","postId","params","dispatch","post","loading","user","error","onEdit","push","console","log","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAAA,QAC1CC,MAD0C,GAC/BF,KAAK,CAACG,MADyB,CAC1CD,MAD0C;AAElD,QAAME,QAAQ,GAAGb,WAAW,EAA5B;;AAFkD,uBAGXC,WAAW,CAChD,CAAC;AAAEa,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,MAA8B;AAC5BF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IADiB;AAE5BG,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAFgB;AAG5BF,IAAAA,OAAO,EAAEA,OAAO,CAAC,gBAAD,CAHY;AAI5BC,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAJiB,GAA9B,CADgD,CAHA;AAAA,QAG1CF,IAH0C,gBAG1CA,IAH0C;AAAA,QAGpCG,KAHoC,gBAGpCA,KAHoC;AAAA,QAG7BF,OAH6B,gBAG7BA,OAH6B;AAAA,QAGpBC,IAHoB,gBAGpBA,IAHoB;;AAYlDjB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACV,QAAQ,CAACQ,MAAD,CAAT,CAAR;AACA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACT,UAAU,EAAX,CAAR;AACD,KAFD;AAGD,GALQ,EAKN,CAACS,QAAD,EAAWF,MAAX,CALM,CAAT;;AAOA,QAAMO,MAAM,GAAG,MAAM;AACnBL,IAAAA,QAAQ,CAACN,eAAe,CAACO,IAAD,CAAhB,CAAR;AACAJ,IAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACD,GAHD;;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AAEA,SACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEE,KAHT;AAIE,IAAA,aAAa,EAAE,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJjB;AAKE,IAAA,OAAO,EAAEF,IAAI,IAAIA,IAAI,CAACM,GAAL,KAAaR,IAArB,IAA6BA,IAAI,CAACE,IAAL,CAAUM,GALlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CApCD;;AAsCA,eAAepB,UAAU,CAACM,mBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(\r\n    ({ post, loading, user }) => ({\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  console.log(user);\r\n  console.log(post);\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={<PostActionButtons onEdit={onEdit} />}\r\n      ownPost={user && user._id === post && post.user._id}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n"]},"metadata":{},"sourceType":"module"}